<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Store | Order Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        :root {
            --primary-color: #4f46e5;
            --primary-hover: #4338ca;
            --secondary-color: #6366f1;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --info-color: #06b6d4;
            --light-bg: #f9fafb;
            --dark-bg: #1e293b;
            --border-radius: 0.5rem;
            --card-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --transition: all 0.2s ease-in-out;
        }
        
        body {
            background-color: #f3f4f6;
            font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            color: #1f2937;
            overflow-x: hidden;
        }
        
        .app-header {
            background-color: #ffffff;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            padding: 1rem 1.5rem;
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.95);
        }
        
        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            margin-bottom: 1.5rem;
            transition: var(--transition);
            overflow: hidden;
            background-color: #ffffff;
        }
        
        .card:hover {
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .card-header {
            background-color: #ffffff;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            padding: 1.25rem 1.5rem;
            border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .btn {
            font-weight: 500;
            border-radius: var(--border-radius);
            padding: 0.625rem 1.25rem;
            transition: var(--transition);
            letter-spacing: 0.025em;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            box-shadow: 0 2px 4px rgba(79, 70, 229, 0.2);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(79, 70, 229, 0.3);
        }
        
        .btn-outline-primary {
            color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(79, 70, 229, 0.2);
        }
        
        .table {
            border-collapse: separate;
            border-spacing: 0;
            margin-bottom: 0;
        }
        
        .table th {
            font-weight: 600;
            color: #4b5563;
            border-bottom-width: 1px;
            padding: 1rem;
            background-color: #f9fafb;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
        }
        
        .table td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .table tr {
            transition: var(--transition);
        }
        
        .table tr:hover {
            background-color: rgba(79, 70, 229, 0.02);
        }
        
        .badge-status {
            padding: 0.4rem 0.65rem;
            font-weight: 500;
            border-radius: 9999px;
            font-size: 0.75rem;
            letter-spacing: 0.025em;
            display: inline-flex;
            align-items: center;
            gap: 0.35rem;
        }
        
        .status-pending {
            background-color: var(--warning-color);
            color: #ffffff;
        }
        
        .status-processing {
            background-color: var(--info-color);
            color: #ffffff;
        }
        
        .status-shipped {
            background-color: var(--primary-color);
            color: #ffffff;
        }
        
        .status-delivered {
            background-color: var(--success-color);
            color: #ffffff;
        }
        
        .status-cancelled {
            background-color: var(--danger-color);
            color: #ffffff;
        }
        
        .status-refunded {
            background-color: #9ca3af;
            color: #ffffff;
        }
        
        .search-container {
            position: relative;
        }
        
        .search-container i {
            position: absolute;
            top: 50%;
            left: 1rem;
            transform: translateY(-50%);
            color: #9ca3af;
            z-index: 1;
        }
        
        .search-input {
            padding: 0.75rem 1rem 0.75rem 2.75rem;
            border-radius: var(--border-radius);
            border: 1px solid rgba(0, 0, 0, 0.1);
            transition: var(--transition);
            font-size: 0.95rem;
            background-color: #f9fafb;
        }
        
        .search-input:focus {
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.15);
            border-color: var(--primary-color);
            background-color: #ffffff;
        }
        
        .form-select, .form-control {
            border-radius: var(--border-radius);
            padding: 0.75rem 1rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            transition: var(--transition);
            font-size: 0.95rem;
            background-color: #f9fafb;
        }
        
        .form-select:focus, .form-control:focus {
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.15);
            border-color: var(--primary-color);
            background-color: #ffffff;
        }
        
        .modal-content {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .modal-header {
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
        }
        
        .modal-footer {
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
        }
        
        .pagination {
            margin-bottom: 0;
            gap: 0.25rem;
        }
        
        .page-item:first-child .page-link {
            border-top-left-radius: var(--border-radius);
            border-bottom-left-radius: var(--border-radius);
        }
        
        .page-item:last-child .page-link {
            border-top-right-radius: var(--border-radius);
            border-bottom-right-radius: var(--border-radius);
        }
        
        .page-link {
            color: var(--primary-color);
            transition: var(--transition);
            border-radius: var(--border-radius);
            margin: 0 2px;
            padding: 0.5rem 0.75rem;
            font-weight: 500;
        }
        
        .page-link:hover {
            background-color: rgba(79, 70, 229, 0.1);
            color: var(--primary-color);
            transform: translateY(-1px);
        }
        
        .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            box-shadow: 0 2px 4px rgba(79, 70, 229, 0.2);
        }
        
        #pageSizeSelect {
            width: 130px !important;
            display: inline-block;
            padding: 0.375rem 2.25rem 0.375rem 0.75rem;
            font-size: 0.875rem;
            height: calc(1.5em + 0.75rem + 2px);
        }
        
        .toast-container {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1100;
        }
        
        .toast {
            background-color: white;
            border: none;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            min-width: 300px;
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.95);
        }
        
        .spinner-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            visibility: hidden;
            opacity: 0;
            transition: var(--transition);
            backdrop-filter: blur(5px);
        }
        
        .spinner-overlay.show {
            visibility: visible;
            opacity: 1;
        }
        
        .spinner-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: white;
            padding: 2rem;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        
        .order-product {
            display: flex;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .order-product:last-child {
            border-bottom: none;
        }
        
        .order-product-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: var(--border-radius);
            margin-right: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: var(--transition);
            border: 2px solid #ffffff;
        }
        
        .order-product-image:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
        }
        
        .order-timeline {
            position: relative;
            padding-left: 2rem;
        }
        
        .timeline-item {
            position: relative;
            padding-bottom: 1.5rem;
        }
        
        .timeline-item:last-child {
            padding-bottom: 0;
        }
        
        .timeline-item::before {
            content: '';
            position: absolute;
            left: -1.5rem;
            top: 0.25rem;
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            background-color: var(--primary-color);
            z-index: 1;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.15);
        }
        
        .timeline-item::after {
            content: '';
            position: absolute;
            left: -1rem;
            top: 0.75rem;
            width: 0.125rem;
            height: 100%;
            background-color: #e5e7eb;
            z-index: 0;
        }
        
        .timeline-item:last-child::after {
            display: none;
        }
        
        .timeline-date {
            font-size: 0.75rem;
            color: #6b7280;
        }
        
        .back-button {
            display: inline-flex;
            align-items: center;
            color: var(--primary-color);
            font-weight: 500;
            transition: var(--transition);
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
        }
        
        .back-button:hover {
            color: var(--primary-hover);
            transform: translateX(-3px);
            background-color: rgba(79, 70, 229, 0.1);
        }
        
        .back-button i {
            margin-right: 0.5rem;
        }
        
        .order-summary-card {
            border-left: 4px solid var(--primary-color);
            border-radius: 0 var(--border-radius) var(--border-radius) 0;
        }
        
        .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
        }
        
        .summary-item:not(:last-child) {
            border-bottom: 1px dashed rgba(0, 0, 0, 0.05);
        }
        
        .summary-total {
            font-weight: 600;
            font-size: 1.1rem;
            color: var(--primary-color);
        }
        
        .info-card {
            height: 100%;
            transition: var(--transition);
        }
        
        .info-card:hover {
            transform: translateY(-5px);
        }
        
        .info-card .card-header {
            background-color: #f9fafb;
            font-weight: 600;
        }
        
        .info-label {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: #6b7280;
            margin-bottom: 0.25rem;
        }
        
        .info-value {
            font-weight: 500;
        }
        
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem 1rem;
            text-align: center;
        }
        
        .empty-state i {
            font-size: 3rem;
            color: #d1d5db;
            margin-bottom: 1rem;
        }
        
        .empty-state h5 {
            color: #4b5563;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }
        
        .empty-state p {
            color: #9ca3af;
            margin-bottom: 1.5rem;
            max-width: 300px;
            line-height: 1.5;
        }
        
        .skeleton {
            background: linear-gradient(90deg, #f3f4f6 0%, #e5e7eb 50%, #f3f4f6 100%);
            background-size: 200% 100%;
            animation: skeleton-loading 1.5s ease-in-out infinite;
            border-radius: var(--border-radius);
        }
        
        @keyframes skeleton-loading {
            0% {
                background-position: 200% 0;
            }
            100% {
                background-position: -200% 0;
            }
        }
        
        .skeleton-text {
            height: 1rem;
            margin-bottom: 0.5rem;
            width: 100%;
        }
        
        .skeleton-text.sm {
            height: 0.75rem;
            width: 80%;
        }
        
        .skeleton-circle {
            width: 56px;
            height: 56px;
            border-radius: 50%;
        }
        
        .skeleton-button {
            height: 2.5rem;
            width: 8rem;
        }
        
        .skeleton-badge {
            height: 1.5rem;
            width: 5rem;
            border-radius: 9999px;
        }
        
        .date-range-container {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .date-range-container .form-control {
            border-radius: var(--border-radius);
        }
        
        .date-range-container .date-separator {
            color: #6b7280;
        }
        
        .status-pill {
            display: inline-flex;
            align-items: center;
            padding: 0.35rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            letter-spacing: 0.025em;
            transition: var(--transition);
        }
        
        .status-pill i {
            margin-right: 0.35rem;
            font-size: 0.7rem;
        }
        
        .order-details-modal .modal-dialog {
            max-width: 900px;
        }
        
        .order-details-header {
            background-color: var(--light-bg);
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            padding: 1.5rem;
            position: relative;
        }
        
        .order-id-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background-color: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            box-shadow: 0 4px 6px rgba(79, 70, 229, 0.3);
            transform: rotate(2deg);
        }
        
        .notification-badge {
            position: relative;
        }
        
        .notification-badge .badge {
            position: absolute;
            top: -5px;
            right: -5px;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 0.65rem;
            padding: 0;
            background-color: var(--danger-color);
            box-shadow: 0 2px 4px rgba(239, 68, 68, 0.2);
        }
        
        @media (max-width: 768px) {
            .card-header {
                flex-direction: column;
                align-items: flex-start !important;
                padding: 1.25rem;
            }
            
            .card-header .btn {
                margin-top: 1rem;
                align-self: flex-start;
                width: 100%;
            }
            
            .filter-row {
                flex-direction: column;
                gap: 1rem;
            }
            
            .filter-row > div {
                margin-bottom: 0;
                width: 100%;
            }
            
            .date-range-container {
                flex-direction: column;
                width: 100%;
            }
            
            .date-range-container .form-control {
                width: 100%;
            }
            
            .date-range-container .date-separator {
                display: none;
            }
            
            .table-responsive {
                border-radius: var(--border-radius);
                box-shadow: var(--card-shadow);
            }
            
            .table th {
                white-space: nowrap;
            }
            
            .order-details-modal .modal-dialog {
                margin: 0.5rem;
            }
            
            .order-id-badge {
                position: static;
                display: inline-block;
                margin-bottom: 1rem;
                transform: none;
            }
        }
    </style>
</head>
<body>
    <div class="spinner-overlay" id="loadingSpinner">
        <div class="spinner-container">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mb-0">Loading data...</p>
        </div>
    </div>
    
    <div class="toast-container" id="toastContainer"></div>
    
    <header class="app-header">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <a href="/v1/api/dashboard" class="back-button me-4">
                        <i class="fas fa-arrow-left"></i> Back
                    </a>
                    <h4 class="mb-0">
                        <i class="fas fa-shopping-cart me-2 text-primary"></i>
                        Order Management
                    </h4>
                </div>
                <div class="d-flex align-items-center gap-3">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary notification-badge" type="button" id="notificationsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-bell"></i>
                            <span class="badge bg-danger" id="notificationCount">0</span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="notificationsDropdown" style="min-width: 300px;" id="notificationsMenu">
                            <li>
                                <h6 class="dropdown-header">Notifications</h6>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li id="notificationsContainer">
                                <div class="dropdown-item text-center py-3">
                                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mb-0 mt-2 small text-muted">Loading notifications...</p>
                                </div>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item text-center" href="#">View all notifications</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </header>
    
    <main class="container-fluid py-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Order Management</h5>
                        <div>
                            <button class="btn btn-outline-primary me-2" id="exportOrdersBtn">
                                <i class="fas fa-file-export me-1"></i> Export
                            </button>
                            <button class="btn btn-primary" id="refreshOrdersBtn">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4 filter-row">
                            <div class="col-md-4 mb-3 mb-md-0">
                                <div class="search-container">
                                    <input type="text" class="form-control search-input" id="searchOrders" placeholder="Search by order ID, customer...">
                                </div>
                            </div>
                            <div class="col-md-3 mb-3 mb-md-0">
                                <select class="form-select" id="statusFilter">
                                    <option selected value="">All Statuses</option>
                                    <option value="pending">Pending</option>
                                    <option value="processing">Processing</option>
                                    <option value="shipped">Shipped</option>
                                    <option value="delivered">Delivered</option>
                                    <option value="cancelled">Cancelled</option>
                                    <option value="refunded">Refunded</option>
                                </select>
                            </div>
                            <div class="col-md-5">
                                <div class="date-range-container">
                                    <div class="input-group">
                                        <span class="input-group-text bg-light">
                                            <i class="fas fa-calendar-alt text-muted"></i>
                                        </span>
                                        <input type="date" class="form-control" id="startDate" placeholder="Start Date">
                                    </div>
                                    <span class="date-separator">to</span>
                                    <div class="input-group">
                                        <span class="input-group-text bg-light">
                                            <i class="fas fa-calendar-alt text-muted"></i>
                                        </span>
                                        <input type="date" class="form-control" id="endDate" placeholder="End Date">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row mb-4">
                            <div class="col-md-3 col-sm-6 mb-3 mb-md-0">
                                <div class="card h-100">
                                    <div class="card-body d-flex flex-column align-items-center justify-content-center text-center p-3">
                                        <div class="bg-primary bg-opacity-10 rounded-circle p-2 mb-2">
                                            <i class="fas fa-shopping-cart text-primary fa-lg"></i>
                                        </div>
                                        <h4 class="mb-1 fw-bold" id="totalOrdersCount">0</h4>
                                        <p class="text-muted mb-0 small">Total Orders</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6 mb-3 mb-md-0">
                                <div class="card h-100">
                                    <div class="card-body d-flex flex-column align-items-center justify-content-center text-center p-3">
                                        <div class="bg-success bg-opacity-10 rounded-circle p-2 mb-2">
                                            <i class="fas fa-check-circle text-success fa-lg"></i>
                                        </div>
                                        <h4 class="mb-1 fw-bold" id="completedOrdersCount">0</h4>
                                        <p class="text-muted mb-0 small">Completed Orders</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6 mb-3 mb-md-0">
                                <div class="card h-100">
                                    <div class="card-body d-flex flex-column align-items-center justify-content-center text-center p-3">
                                        <div class="bg-warning bg-opacity-10 rounded-circle p-2 mb-2">
                                            <i class="fas fa-clock text-warning fa-lg"></i>
                                        </div>
                                        <h4 class="mb-1 fw-bold" id="pendingOrdersCount">0</h4>
                                        <p class="text-muted mb-0 small">Pending Orders</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6">
                                <div class="card h-100">
                                    <div class="card-body d-flex flex-column align-items-center justify-content-center text-center p-3">
                                        <div class="bg-danger bg-opacity-10 rounded-circle p-2 mb-2">
                                            <i class="fas fa-times-circle text-danger fa-lg"></i>
                                        </div>
                                        <h4 class="mb-1 fw-bold" id="cancelledOrdersCount">0</h4>
                                        <p class="text-muted mb-0 small">Cancelled Orders</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-hover align-middle" id="ordersTable">
                                <thead>
                                    <tr>
                                        <th>Order ID</th>
                                        <th>Customer</th>
                                        <th>Date</th>
                                        <th>Total</th>
                                        <th>Status</th>
                                        <th>Payment</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="ordersTableBody">
                                    <tr class="skeleton-row">
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-badge"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-button"></div></td>
                                    </tr>
                                    <tr class="skeleton-row">
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-badge"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-button"></div></td>
                                    </tr>
                                    <tr class="skeleton-row">
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-badge"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-button"></div></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        
                        <div id="paginationContainer" class="mt-4">
                            <div class="d-flex justify-content-between align-items-center flex-wrap">
                                <div class="d-flex align-items-center mb-2 mb-md-0">
                                    <select class="form-select form-select-sm me-2" id="pageSizeSelect">
                                        <option value="10">10 per page</option>
                                        <option value="25">25 per page</option>
                                        <option value="50">50 per page</option>
                                        <option value="100">100 per page</option>
                                    </select>
                                    <span class="text-muted small" id="paginationInfo">Showing 1-5 of 5 orders</span>
                                </div>
                                <nav aria-label="Page navigation" id="ordersPagination">
                                    <ul class="pagination pagination-sm">
                                        <li class="page-item disabled">
                                            <a class="page-link" href="#" data-page="prev" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                            </a>
                                        </li>
                                        <li class="page-item active"><a class="page-link" href="#" data-page="1">1</a></li>
                                        <li class="page-item disabled">
                                            <a class="page-link" href="#" data-page="next" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <div class="modal fade order-details-modal" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="order-details-header">
                    <div class="order-id-badge" id="detailOrderId">#ORD-12345</div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="info-label">Customer</div>
                            <div class="info-value fw-semibold fs-5" id="detailCustomerName">John Doe</div>
                            <div class="d-flex align-items-center mt-2">
                                <div class="me-3">
                                    <i class="fas fa-envelope text-muted me-1"></i>
                                    <span id="detailCustomerEmail">john.doe@example.com</span>
                                </div>
                                <div>
                                    <i class="fas fa-phone text-muted me-1"></i>
                                    <span id="detailCustomerPhone">(123) 456-7890</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="info-label">Order Status</div>
                            <div id="detailOrderStatus" class="mb-2">
                                <span class="badge badge-status status-processing">
                                    <i class="fas fa-cog fa-spin"></i> Processing
                                </span>
                            </div>
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <i class="fas fa-calendar-alt text-muted me-1"></i>
                                    <span id="detailOrderDate">March 15, 2023, 10:30 AM</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="row mb-4">
                        <div class="col-md-6 mb-3 mb-md-0">
                            <div class="card info-card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-map-marker-alt me-2 text-primary"></i>
                                        Shipping Address
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p class="mb-1 fw-semibold" id="detailShippingName">John Doe</p>
                                    <p class="mb-1" id="detailShippingAddress1">123 Main Street</p>
                                    <p class="mb-1" id="detailShippingAddress2">Apt 4B</p>
                                    <p class="mb-1" id="detailShippingCityState">New York, NY 10001</p>
                                    <p class="mb-0" id="detailShippingCountry">United States</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card info-card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-credit-card me-2 text-primary"></i>
                                        Payment Information
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <div class="info-label">Payment Method</div>
                                        <div class="info-value" id="detailPaymentMethod">Credit Card (Visa ending in 4242)</div>
                                    </div>
                                    <div>
                                        <div class="info-label">Billing Address</div>
                                        <p class="mb-1 small" id="detailBillingName">John Doe</p>
                                        <p class="mb-1 small" id="detailBillingAddress1">123 Main Street</p>
                                        <p class="mb-1 small" id="detailBillingCityState">New York, NY 10001</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-8 mb-3 mb-md-0">
                            <div class="card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-shopping-bag me-2 text-primary"></i>
                                        Order Items
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div id="orderItemsContainer">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card order-summary-card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-receipt me-2 text-primary"></i>
                                        Order Summary
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="summary-item">
                                        <span>Subtotal</span>
                                        <span id="detailSubtotal">₹120.00</span>
                                    </div>
                                    <div class="summary-item">
                                        <span>Shipping</span>
                                        <span id="detailShipping">₹5.99</span>
                                    </div>
                                    <div class="summary-item">
                                        <span>Tax</span>
                                        <span id="detailTax">₹10.80</span>
                                    </div>
                                    <div class="summary-item summary-total">
                                        <span>Total</span>
                                        <span id="detailTotal">₹136.79</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-history me-2 text-primary"></i>
                                Order Timeline
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="order-timeline" id="orderTimelineContainer">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="d-flex justify-content-between w-100">
                        <div>
                            <button type="button" class="btn btn-outline-danger me-2" id="cancelOrderBtn">
                                <i class="fas fa-times me-1"></i> Cancel Order
                            </button>
                        </div>
                        <div>
                            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" id="updateStatusBtn">
                                <i class="fas fa-check me-1"></i> Update Status
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal fade" id="updateStatusModal" tabindex="-1" aria-labelledby="updateStatusModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateStatusModalLabel">Update Order Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="updateOrderId">
                    <div class="mb-3">
                        <label for="orderStatus" class="form-label">Status</label>
                        <select class="form-select" id="orderStatus">
                            <option value="pending">Pending</option>
                            <option value="processing">Processing</option>
                            <option value="shipped">Shipped</option>
                            <option value="delivered">Delivered</option>
                            <option value="cancelled">Cancelled</option>
                            <option value="refunded">Refunded</option>
                        </select>
                    </div>
                    <div class="mb-3" id="trackingNumberContainer">
                        <label for="trackingNumber" class="form-label">Tracking Number</label>
                        <input type="text" class="form-control" id="trackingNumber" placeholder="Enter tracking number">
                    </div>
                    <div class="mb-3">
                        <label for="statusNote" class="form-label">Note (Optional)</label>
                        <textarea class="form-control" id="statusNote" rows="3" placeholder="Add a note about this status update"></textarea>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="notifyCustomer" checked>
                        <label class="form-check-label" for="notifyCustomer">
                            Notify customer about this update
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmStatusUpdateBtn">Update Status</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cancelOrderModalLabel">Confirm Order Cancellation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-3">
                        <i class="fas fa-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                    </div>
                    <p class="text-center">Are you sure you want to cancel this order? This action cannot be undone.</p>
                    <input type="hidden" id="cancelOrderId">
                    <div class="mb-3">
                        <label for="cancellationReason" class="form-label">Reason for Cancellation</label>
                        <select class="form-select" id="cancellationReason">
                            <option value="customer_request">Customer Request</option>
                            <option value="out_of_stock">Item(s) Out of Stock</option>
                            <option value="payment_issue">Payment Issue</option>
                            <option value="duplicate_order">Duplicate Order</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="cancellationNote" class="form-label">Additional Notes</label>
                        <textarea class="form-control" id="cancellationNote" rows="3" placeholder="Add any additional notes about this cancellation"></textarea>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="notifyCustomerCancel" checked>
                        <label class="form-check-label" for="notifyCustomerCancel">
                            Notify customer about this cancellation
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No, Keep Order</button>
                    <button type="button" class="btn btn-danger" id="confirmCancelOrderBtn">Yes, Cancel Order</button>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const API = {
            baseUrl: '/api',
            
            async getOrders(params = {}) {
                try {
                    UI.showLoading();
                    const queryParams = new URLSearchParams(params).toString();
                    
                    try {
                        const response = await fetch(`${this.baseUrl}/orders?${queryParams}`, {
                            signal: AbortSignal.timeout(5000)
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to fetch orders');
                        }
                        
                        const data = await response.json();
                        return data;
                    } catch (error) {
                        console.warn('API request failed, using mock data:', error);
                        await new Promise(resolve => setTimeout(resolve, 800)); 
                        
                        const mockOrders = [
                            {
                                id: 'ORD-12345',
                                customer: {
                                    name: 'John Doe',
                                    email: 'john.doe@example.com',
                                    phone: '(123) 456-7890'
                                },
                                date: '2023-03-15T10:30:00',
                                total: 136.79,
                                status: 'processing',
                                payment: {
                                    method: 'Credit Card',
                                    details: 'Visa ending in 4242',
                                    status: 'paid'
                                },
                                shipping: {
                                    name: 'John Doe',
                                    address1: '123 Main Street',
                                    address2: 'Apt 4B',
                                    city: 'New York',
                                    state: 'NY',
                                    zip: '10001',
                                    country: 'United States'
                                },
                                billing: {
                                    name: 'John Doe',
                                    address1: '123 Main Street',
                                    address2: 'Apt 4B',
                                    city: 'New York',
                                    state: 'NY',
                                    zip: '10001',
                                    country: 'United States'
                                },
                                items: [
                                    {
                                        id: '1',
                                        title: 'Data Structures and Algorithms',
                                        price: 45.99,
                                        quantity: 2,
                                        image: 'https://via.placeholder.com/50'
                                    },
                                    {
                                        id: '3',
                                        title: 'Financial Management',
                                        price: 52.99,
                                        quantity: 1,
                                        image: 'https://via.placeholder.com/50'
                                    }
                                ],
                                summary: {
                                    subtotal: 144.97,
                                    shipping: 5.99,
                                    tax: 13.05,
                                    total: 164.01
                                },
                                timeline: [
                                    {
                                        status: 'order_placed',
                                        date: '2023-03-15T10:30:00',
                                        note: 'Order placed by customer'
                                    },
                                    {
                                        status: 'payment_received',
                                        date: '2023-03-15T10:32:00',
                                        note: 'Payment received via Credit Card'
                                    },
                                    {
                                        status: 'processing',
                                        date: '2023-03-15T14:45:00',
                                        note: 'Order is being processed'
                                    }
                                ]
                            },
                            {
                                id: 'ORD-12346',
                                customer: {
                                    name: 'Jane Smith',
                                    email: 'jane.smith@example.com',
                                    phone: '(234) 567-8901'
                                },
                                date: '2023-03-14T15:45:00',
                                total: 89.97,
                                status: 'shipped',
                                payment: {
                                    method: 'PayPal',
                                    details: 'jane.smith@example.com',
                                    status: 'paid'
                                },
                                shipping: {
                                    name: 'Jane Smith',
                                    address1: '456 Oak Avenue',
                                    address2: '',
                                    city: 'Boston',
                                    state: 'MA',
                                    zip: '02108',
                                    country: 'United States'
                                },
                                billing: {
                                    name: 'Jane Smith',
                                    address1: '456 Oak Avenue',
                                    address2: '',
                                    city: 'Boston',
                                    state: 'MA',
                                    zip: '02108',
                                    country: 'United States'
                                },
                                items: [
                                    {
                                        id: '2',
                                        title: 'Database Management Systems',
                                        price: 39.99,
                                        quantity: 1,
                                        image: 'https://via.placeholder.com/50'
                                    },
                                    {
                                        id: '5',
                                        title: 'Digital Signal Processing',
                                        price: 56.75,
                                        quantity: 1,
                                        image: 'https://via.placeholder.com/50'
                                    }
                                ],
                                summary: {
                                    subtotal: 96.74,
                                    shipping: 4.99,
                                    tax: 8.71,
                                    total: 110.44
                                },
                                timeline: [
                                    {
                                        status: 'order_placed',
                                        date: '2023-03-14T15:45:00',
                                        note: 'Order placed by customer'
                                    },
                                    {
                                        status: 'payment_received',
                                        date: '2023-03-14T15:46:00',
                                        note: 'Payment received via PayPal'
                                    },
                                    {
                                        status: 'processing',
                                        date: '2023-03-14T16:30:00',
                                        note: 'Order is being processed'
                                    },
                                    {
                                        status: 'shipped',
                                        date: '2023-03-15T09:15:00',
                                        note: 'Order has been shipped',
                                        tracking: 'USPS1234567890'
                                    }
                                ]
                            },
                            {
                                id: 'ORD-12347',
                                customer: {
                                    name: 'Robert Johnson',
                                    email: 'robert.johnson@example.com',
                                    phone: '(345) 678-9012'
                                },
                                date: '2023-03-13T09:20:00',
                                total: 52.99,
                                status: 'delivered',
                                payment: {
                                    method: 'Credit Card',
                                    details: 'Mastercard ending in 5678',
                                    status: 'paid'
                                },
                                shipping: {
                                    name: 'Robert Johnson',
                                    address1: '789 Pine Street',
                                    address2: 'Suite 300',
                                    city: 'Chicago',
                                    state: 'IL',
                                    zip: '60601',
                                    country: 'United States'
                                },
                                billing: {
                                    name: 'Robert Johnson',
                                    address1: '789 Pine Street',
                                    address2: 'Suite 300',
                                    city: 'Chicago',
                                    state: 'IL',
                                    zip: '60601',
                                    country: 'United States'
                                },
                                items: [
                                    {
                                        id: '3',
                                        title: 'Financial Management',
                                        price: 52.99,
                                        quantity: 1,
                                        image: 'https://via.placeholder.com/50'
                                    }
                                ],
                                summary: {
                                    subtotal: 52.99,
                                    shipping: 4.99,
                                    tax: 4.77,
                                    total: 62.75
                                },
                                timeline: [
                                    {
                                        status: 'order_placed',
                                        date: '2023-03-13T09:20:00',
                                        note: 'Order placed by customer'
                                    },
                                    {
                                        status: 'payment_received',
                                        date: '2023-03-13T09:22:00',
                                        note: 'Payment received via Credit Card'
                                    },
                                    {
                                        status: 'processing',
                                        date: '2023-03-13T10:15:00',
                                        note: 'Order is being processed'
                                    },
                                    {
                                        status: 'shipped',
                                        date: '2023-03-13T14:30:00',
                                        note: 'Order has been shipped',
                                        tracking: 'FEDEX9876543210'
                                    },
                                    {
                                        status: 'delivered',
                                        date: '2023-03-15T11:45:00',
                                        note: 'Order has been delivered'
                                    }
                                ]
                            },
                            {
                                id: 'ORD-12348',
                                customer: {
                                    name: 'Sarah Williams',
                                    email: 'sarah.williams@example.com',
                                    phone: '(456) 789-0123'
                                },
                                date: '2023-03-12T16:10:00',
                                total: 39.99,
                                status: 'cancelled',
                                payment: {
                                    method: 'Credit Card',
                                    details: 'Visa ending in 1111',
                                    status: 'refunded'
                                },
                                shipping: {
                                    name: 'Sarah Williams',
                                    address1: '101 Maple Drive',
                                    address2: '',
                                    city: 'Los Angeles',
                                    state: 'CA',
                                    zip: '90001',
                                    country: 'United States'
                                },
                                billing: {
                                    name: 'Sarah Williams',
                                    address1: '101 Maple Drive',
                                    address2: '',
                                    city: 'Los Angeles',
                                    state: 'CA',
                                    zip: '90001',
                                    country: 'United States'
                                },
                                items: [
                                    {
                                        id: '2',
                                        title: 'Database Management Systems',
                                        price: 39.99,
                                        quantity: 1,
                                        image: 'https://via.placeholder.com/50'
                                    }
                                ],
                                summary: {
                                    subtotal: 39.99,
                                    shipping: 4.99,
                                    tax: 3.60,
                                    total: 48.58
                                },
                                timeline: [
                                    {
                                        status: 'order_placed',
                                        date: '2023-03-12T16:10:00',
                                        note: 'Order placed by customer'
                                    },
                                    {
                                        status: 'payment_received',
                                        date: '2023-03-12T16:12:00',
                                        note: 'Payment received via Credit Card'
                                    },
                                    {
                                        status: 'processing',
                                        date: '2023-03-12T17:00:00',
                                        note: 'Order is being processed'
                                    },
                                    {
                                        status: 'cancelled',
                                        date: '2023-03-13T09:30:00',
                                        note: 'Order cancelled by customer request'
                                    },
                                    {
                                        status: 'refunded',
                                        date: '2023-03-13T10:15:00',
                                        note: 'Payment refunded to customer'
                                    }
                                ]
                            },
                            {
                                id: 'ORD-12349',
                                customer: {
                                    name: 'Michael Brown',
                                    email: 'michael.brown@example.com',
                                    phone: '(567) 890-1234'
                                },
                                date: '2023-03-11T11:25:00',
                                total: 48.50,
                                status: 'pending',
                                payment: {
                                    method: 'Bank Transfer',
                                    details: 'Awaiting payment confirmation',
                                    status: 'pending'
                                },
                                shipping: {
                                    name: 'Michael Brown',
                                    address1: '202 Cedar Lane',
                                    address2: 'Apt 5C',
                                    city: 'Seattle',
                                    state: 'WA',
                                    zip: '98101',
                                    country: 'United States'
                                },
                                billing: {
                                    name: 'Michael Brown',
                                    address1: '202 Cedar Lane',
                                    address2: 'Apt 5C',
                                    city: 'Seattle',
                                    state: 'WA',
                                    zip: '98101',
                                    country: 'United States'
                                },
                                items: [
                                    {
                                        id: '4',
                                        title: 'Power Systems Engineering',
                                        price: 48.50,
                                        quantity: 1,
                                        image: 'https://via.placeholder.com/50'
                                    }
                                ],
                                summary: {
                                    subtotal: 48.50,
                                    shipping: 4.99,
                                    tax: 4.37,
                                    total: 57.86
                                },
                                timeline: [
                                    {
                                        status: 'order_placed',
                                        date: '2023-03-11T11:25:00',
                                        note: 'Order placed by customer'
                                    },
                                    {
                                        status: 'pending_payment',
                                        date: '2023-03-11T11:25:00',
                                        note: 'Awaiting payment via Bank Transfer'
                                    }
                                ]
                            }
                        ];
                        
                        let filteredOrders = [...mockOrders];
                        
                        if (params.search) {
                            const search = params.search.toLowerCase();
                            filteredOrders = filteredOrders.filter(order => 
                                order.id.toLowerCase().includes(search) ||
                                order.customer.name.toLowerCase().includes(search) ||
                                order.customer.email.toLowerCase().includes(search)
                            );
                        }
                        
                        if (params.status) {
                            filteredOrders = filteredOrders.filter(order => 
                                order.status === params.status
                            );
                        }
                        
                        if (params.startDate && params.endDate) {
                            const startDate = new Date(params.startDate);
                            const endDate = new Date(params.endDate);
                            endDate.setHours(23, 59, 59, 999);
                            
                            filteredOrders = filteredOrders.filter(order => {
                                const orderDate = new Date(order.date);
                                return orderDate >= startDate && orderDate <= endDate;
                            });
                        } else if (params.startDate) {
                            const startDate = new Date(params.startDate);
                            filteredOrders = filteredOrders.filter(order => {
                                const orderDate = new Date(order.date);
                                return orderDate >= startDate;
                            });
                        } else if (params.endDate) {
                            const endDate = new Date(params.endDate);
                            endDate.setHours(23, 59, 59, 999); 
                            
                            filteredOrders = filteredOrders.filter(order => {
                                const orderDate = new Date(order.date);
                                return orderDate <= endDate;
                            });
                        }
                        
                        const page = parseInt(params.page) || 1;
                        const limit = parseInt(params.limit) || 10;
                        const startIndex = (page - 1) * limit;
                        const endIndex = startIndex + limit;
                        const paginatedOrders = filteredOrders.slice(startIndex, endIndex);
                        
                        return {
                            orders: paginatedOrders,
                            totalItems: filteredOrders.length,
                            totalPages: Math.ceil(filteredOrders.length / limit),
                            currentPage: page,
                            pageSize: limit
                        };
                    }
                } catch (error) {
                    console.error('Error fetching orders:', error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            },
            
            async getOrder(id) {
                try {
                    UI.showLoading();
                    
                    try {
                        const response = await fetch(`${this.baseUrl}/orders/${id}`, {
                            signal: AbortSignal.timeout(5000) 
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to fetch order');
                        }
                        
                        const order = await response.json();
                        return order;
                    } catch (error) {
                        console.warn('API request failed, using mock data:', error);
                        await new Promise(resolve => setTimeout(resolve, 800)); 
                        
                        const mockOrders = await this.getOrders();
                        const order = mockOrders.orders.find(o => o.id === id);
                        
                        if (!order) {
                            throw new Error('Order not found');
                        }
                        
                        return order;
                    }
                } catch (error) {
                    console.error(`Error fetching order ${id}:`, error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            },
            
            async updateOrderStatus(id, statusData) {
                try {
                    UI.showLoading();
                    
                    try {
                        const response = await fetch(`${this.baseUrl}/orders/${id}/status`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(statusData),
                            signal: AbortSignal.timeout(5000) 
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to update order status');
                        }
                        
                        const result = await response.json();
                        return result;
                    } catch (error) {
                        console.warn('API request failed, using mock response:', error);
                        // If API fails, use mock response
                        await new Promise(resolve => setTimeout(resolve, 800));
                        
                        return {
                            success: true,
                            message: `Order ${id} status updated to ${statusData.status}`
                        };
                    }
                } catch (error) {
                    console.error(`Error updating order status ${id}:`, error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            },
            
            async cancelOrder(id, cancellationData) {
                try {
                    UI.showLoading();
                    
                    try {
                        const response = await fetch(`${this.baseUrl}/orders/${id}/cancel`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(cancellationData),
                            signal: AbortSignal.timeout(5000)
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to cancel order');
                        }
                        
                        const result = await response.json();
                        return result;
                    } catch (error) {
                        console.warn('API request failed, using mock response:', error);
                        await new Promise(resolve => setTimeout(resolve, 800)); 
                        
                        return {
                            success: true,
                            message: `Order ${id} has been cancelled`
                        };
                    }
                } catch (error) {
                    console.error(`Error cancelling order ${id}:`, error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            }
        };
        
        const UI = {
            elements: {
                loadingSpinner: document.getElementById('loadingSpinner'),
                toastContainer: document.getElementById('toastContainer'),
                
                ordersTableBody: document.getElementById('ordersTableBody'),
                searchOrders: document.getElementById('searchOrders'),
                statusFilter: document.getElementById('statusFilter'),
                startDate: document.getElementById('startDate'),
                endDate: document.getElementById('endDate'),
                
                ordersPagination: document.getElementById('ordersPagination'),
                pageSizeSelect: document.getElementById('pageSizeSelect'),
                paginationInfo: document.getElementById('paginationInfo'),
                
                refreshOrdersBtn: document.getElementById('refreshOrdersBtn'),
                exportOrdersBtn: document.getElementById('exportOrdersBtn'),
                updateStatusBtn: document.getElementById('updateStatusBtn'),
                confirmStatusUpdateBtn: document.getElementById('confirmStatusUpdateBtn'),
                cancelOrderBtn: document.getElementById('cancelOrderBtn'),
                confirmCancelOrderBtn: document.getElementById('confirmCancelOrderBtn')
            },
            
            init() {
                this.setupEventListeners();
            },
            
            setupEventListeners() {
                this.elements.searchOrders?.addEventListener('input', debounce(() => {
                    OrdersController.loadOrders();
                }, 300));
                
                this.elements.statusFilter?.addEventListener('change', () => {
                    OrdersController.loadOrders();
                });
                
                this.elements.startDate?.addEventListener('change', () => {
                    OrdersController.loadOrders();
                });
                
                this.elements.endDate?.addEventListener('change', () => {
                    OrdersController.loadOrders();
                });
                
                this.elements.pageSizeSelect?.addEventListener('change', () => {
                    OrdersController.pageSize = parseInt(this.elements.pageSizeSelect.value);
                    OrdersController.currentPage = 1;
                    OrdersController.loadOrders();
                });
                
                this.elements.refreshOrdersBtn?.addEventListener('click', () => {
                    OrdersController.loadOrders();
                });
                
                this.elements.exportOrdersBtn?.addEventListener('click', () => {
                    this.showToast('Export', 'Orders exported successfully');
                });
                
                this.elements.updateStatusBtn?.addEventListener('click', () => {
                    const updateStatusModal = new bootstrap.Modal(document.getElementById('updateStatusModal'));
                    updateStatusModal.show();
                });
                
                this.elements.confirmStatusUpdateBtn?.addEventListener('click', () => {
                    OrdersController.updateOrderStatus();
                });
                
                this.elements.cancelOrderBtn?.addEventListener('click', () => {
                    const orderId = document.getElementById('detailOrderId').textContent;
                    document.getElementById('cancelOrderId').value = orderId;
                    const cancelOrderModal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
                    cancelOrderModal.show();
                });
                
                this.elements.confirmCancelOrderBtn?.addEventListener('click', () => {
                    OrdersController.cancelOrder();
                });
                
                document.getElementById('orderStatus')?.addEventListener('change', (e) => {
                    const status = e.target.value;
                    const trackingContainer = document.getElementById('trackingNumberContainer');
                    
                    if (status === 'shipped') {
                        trackingContainer.classList.remove('d-none');
                    } else {
                        trackingContainer.classList.add('d-none');
                    }
                });
                
                document.addEventListener('click', (e) => {
                    if (e.target.closest('.view-order')) {
                        const orderId = e.target.closest('.view-order').dataset.id;
                        OrdersController.loadOrderDetails(orderId);
                    }
                    
                    if (e.target.closest('.page-link')) {
                        e.preventDefault();
                        const pageItem = e.target.closest('.page-item');
                        if (pageItem && !pageItem.classList.contains('active') && !pageItem.classList.contains('disabled')) {
                            const page = e.target.closest('.page-link').dataset.page;
                            if (page === 'prev') {
                                OrdersController.currentPage = Math.max(1, OrdersController.currentPage - 1);
                            } else if (page === 'next') {
                                OrdersController.currentPage = Math.min(OrdersController.totalPages, OrdersController.currentPage + 1);
                            } else {
                                OrdersController.currentPage = parseInt(page);
                            }
                            OrdersController.loadOrders();
                        }
                    }
                });
            },
            
            showLoading() {
                this.elements.loadingSpinner.classList.add('show');
            },
            
            hideLoading() {
                this.elements.loadingSpinner.classList.remove('show');
            },
            
            showToast(title, message, type = 'success') {
                const toastId = 'toast-' + Date.now();
                const toast = document.createElement('div');
                toast.className = 'toast';
                toast.id = toastId;
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');
                
                const toastHeader = document.createElement('div');
                toastHeader.className = 'toast-header';
                
                let iconClass = 'text-success';
                let icon = 'fas fa-check-circle';
                
                if (type === 'error') {
                    iconClass = 'text-danger';
                    icon = 'fas fa-exclamation-circle';
                } else if (type === 'warning') {
                    iconClass = 'text-warning';
                    icon = 'fas fa-exclamation-triangle';
                } else if (type === 'info') {
                    iconClass = 'text-info';
                    icon = 'fas fa-info-circle';
                }
                
                toastHeader.innerHTML = `
                    <i class="${icon} me-2 ${iconClass}"></i>
                    <strong class="me-auto">${title}</strong>
                    <small>Just now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                `;
                
                const toastBody = document.createElement('div');
                toastBody.className = 'toast-body';
                toastBody.textContent = message;
                
                toast.appendChild(toastHeader);
                toast.appendChild(toastBody);
                
                this.elements.toastContainer.appendChild(toast);
                
                const bsToast = new bootstrap.Toast(toast, {
                    autohide: true,
                    delay: 5000
                });
                
                bsToast.show();
                
                toast.addEventListener('hidden.bs.toast', () => {
                    toast.remove();
                });
            },
            
            renderOrders(orders) {
                if (!this.elements.ordersTableBody) return;
                
                this.elements.ordersTableBody.innerHTML = '';
                
                if (orders.length === 0) {
                    this.elements.ordersTableBody.innerHTML = `
                        <tr>
                            <td colspan="7" class="text-center py-4">
                                <div class="empty-state">
                                    <i class="fas fa-shopping-cart text-muted"></i>
                                    <h5>No orders found</h5>
                                    <p>Try adjusting your search or filter to find what you're looking for.</p>
                                    <button class="btn btn-primary" id="resetFiltersBtn">
                                        <i class="fas fa-filter me-1"></i> Reset Filters
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                    
                    document.getElementById('resetFiltersBtn')?.addEventListener('click', () => {
                        this.elements.searchOrders.value = '';
                        this.elements.statusFilter.value = '';
                        this.elements.startDate.value = '';
                        this.elements.endDate.value = '';
                        OrdersController.loadOrders();
                    });
                    
                    return;
                }
                
                document.querySelectorAll('.skeleton-row').forEach(row => {
                    row.style.display = 'none';
                });
                
                orders.forEach(order => {
                    const row = document.createElement('tr');
                    row.dataset.id = order.id;
                    
                    const orderDate = new Date(order.date);
                    const formattedDate = orderDate.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                    });
                    
                    let statusBadge = '';
                    switch (order.status) {
                        case 'pending':
                            statusBadge = '<span class="badge badge-status status-pending"><i class="fas fa-clock"></i> Pending</span>';
                            break;
                        case 'processing':
                            statusBadge = '<span class="badge badge-status status-processing"><i class="fas fa-cog fa-spin"></i> Processing</span>';
                            break;
                        case 'shipped':
                            statusBadge = '<span class="badge badge-status status-shipped"><i class="fas fa-truck"></i> Shipped</span>';
                            break;
                        case 'delivered':
                            statusBadge = '<span class="badge badge-status status-delivered"><i class="fas fa-check-circle"></i> Delivered</span>';
                            break;
                        case 'cancelled':
                            statusBadge = '<span class="badge badge-status status-cancelled"><i class="fas fa-times-circle"></i> Cancelled</span>';
                            break;
                        case 'refunded':
                            statusBadge = '<span class="badge badge-status status-refunded"><i class="fas fa-undo"></i> Refunded</span>';
                            break;
                        default:
                            statusBadge = '<span class="badge badge-status status-pending"><i class="fas fa-clock"></i> Pending</span>';
                    }
                    
                    let paymentStatus = '';
                    switch (order.payment.status) {
                        case 'paid':
                            paymentStatus = '<span class="badge bg-success">Paid</span>';
                            break;
                        case 'pending':
                            paymentStatus = '<span class="badge bg-warning text-dark">Pending</span>';
                            break;
                        case 'refunded':
                            paymentStatus = '<span class="badge bg-secondary">Refunded</span>';
                            break;
                        default:
                            paymentStatus = '<span class="badge bg-secondary">Unknown</span>';
                    }
                    
                    row.innerHTML = `
                        <td>
                            <span class="fw-semibold">${order.id}</span>
                        </td>
                        <td>
                            <div class="fw-semibold">${order.customer.name}</div>
                            <small class="text-muted">${order.customer.email}</small>
                        </td>
                        <td>
                            <div>${formattedDate}</div>
                            <small class="text-muted">${orderDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</small>
                        </td>
                        <td>₹${parseFloat(order.total).toFixed(2)}</td>
                        <td>${statusBadge}</td>
                        <td>
                            <div>${order.payment.method}</div>
                            <div class="d-flex align-items-center">
                                <small class="text-muted me-2">${order.payment.details}</small>
                                ${paymentStatus}
                            </div>
                        </td>
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-primary view-order" data-id="${order.id}">
                                    <i class="fas fa-eye me-1"></i> View
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="visually-hidden">Toggle Dropdown</span>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="#" onclick="OrdersController.printOrder('${order.id}')"><i class="fas fa-print me-2"></i> Print</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="OrdersController.exportOrderPDF('${order.id}')"><i class="fas fa-file-pdf me-2"></i> Export PDF</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item text-danger" href="#" onclick="OrdersController.showCancelOrderModal('${order.id}')"><i class="fas fa-times me-2"></i> Cancel</a></li>
                                </ul>
                            </div>
                        </td>
                    `;
                    
                    this.elements.ordersTableBody.appendChild(row);
                });
            },
            
            renderPagination(pagination) {
                if (!this.elements.ordersPagination) return;
                
                const { currentPage, totalPages, totalItems, pageSize, startItem, endItem } = pagination;
                
                if (this.elements.paginationInfo) {
                    this.elements.paginationInfo.textContent = `Showing ${startItem}-${endItem} of ${totalItems} orders`;
                }
                
                if (this.elements.pageSizeSelect) {
                    this.elements.pageSizeSelect.value = pageSize;
                }
                
                const paginationList = this.elements.ordersPagination.querySelector('ul');
                paginationList.innerHTML = '';
                
                const prevItem = document.createElement('li');
                prevItem.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevItem.innerHTML = `
                    <a class="page-link" href="#" data-page="prev" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                `;
                paginationList.appendChild(prevItem);
                
                const maxPagesToShow = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
                
                if (endPage - startPage + 1 < maxPagesToShow) {
                    startPage = Math.max(1, endPage - maxPagesToShow + 1);
                }
                
                if (startPage > 1) {
                    const firstItem = document.createElement('li');
                    firstItem.className = 'page-item';
                    firstItem.innerHTML = `<a class="page-link" href="#" data-page="1">1</a>`;
                    paginationList.appendChild(firstItem);
                    
                    if (startPage > 2) {
                        const ellipsisItem = document.createElement('li');
                        ellipsisItem.className = 'page-item disabled';
                        ellipsisItem.innerHTML = `<a class="page-link" href="#">...</a>`;
                        paginationList.appendChild(ellipsisItem);
                    }
                }
                
                for (let i = startPage; i <= endPage; i++) {
                    const pageItem = document.createElement('li');
                    pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageItem.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    paginationList.appendChild(pageItem);
                }
                
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        const ellipsisItem = document.createElement('li');
                        ellipsisItem.className = 'page-item disabled';
                        ellipsisItem.innerHTML = `<a class="page-link" href="#">...</a>`;
                        paginationList.appendChild(ellipsisItem);
                    }
                    
                    const lastItem = document.createElement('li');
                    lastItem.className = 'page-item';
                    lastItem.innerHTML = `<a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>`;
                    paginationList.appendChild(lastItem);
                }
                
                const nextItem = document.createElement('li');
                nextItem.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextItem.innerHTML = `
                    <a class="page-link" href="#" data-page="next" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                `;
                paginationList.appendChild(nextItem);
            },
            
            renderOrderDetails(order) {
                document.getElementById('detailOrderId').textContent = order.id;
                
                const orderDate = new Date(order.date);
                document.getElementById('detailOrderDate').textContent = orderDate.toLocaleString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                let statusBadge = '';
                switch (order.status) {
                    case 'pending':
                        statusBadge = '<span class="badge badge-status status-pending"><i class="fas fa-clock"></i> Pending</span>';
                        break;
                    case 'processing':
                        statusBadge = '<span class="badge badge-status status-processing"><i class="fas fa-cog fa-spin"></i> Processing</span>';
                        break;
                    case 'shipped':
                        statusBadge = '<span class="badge badge-status status-shipped"><i class="fas fa-truck"></i> Shipped</span>';
                        break;
                    case 'delivered':
                        statusBadge = '<span class="badge badge-status status-delivered"><i class="fas fa-check-circle"></i> Delivered</span>';
                        break;
                    case 'cancelled':
                        statusBadge = '<span class="badge badge-status status-cancelled"><i class="fas fa-times-circle"></i> Cancelled</span>';
                        break;
                    case 'refunded':
                        statusBadge = '<span class="badge badge-status status-refunded"><i class="fas fa-undo"></i> Refunded</span>';
                        break;
                    default:
                        statusBadge = '<span class="badge badge-status status-pending"><i class="fas fa-clock"></i> Pending</span>';
                }
                
                document.getElementById('detailOrderStatus').innerHTML = statusBadge;
                document.getElementById('detailPaymentMethod').textContent = `${order.payment.method} (${order.payment.details})`;
                
                document.getElementById('detailCustomerName').textContent = order.customer.name;
                document.getElementById('detailCustomerEmail').textContent = order.customer.email;
                document.getElementById('detailCustomerPhone').textContent = order.customer.phone;
                
                document.getElementById('detailShippingName').textContent = order.shipping.name;
                document.getElementById('detailShippingAddress1').textContent = order.shipping.address1;
                document.getElementById('detailShippingAddress2').textContent = order.shipping.address2;
                document.getElementById('detailShippingCityState').textContent = `${order.shipping.city}, ${order.shipping.state} ${order.shipping.zip}`;
                document.getElementById('detailShippingCountry').textContent = order.shipping.country;
                
                document.getElementById('detailBillingName').textContent = order.billing.name;
                document.getElementById('detailBillingAddress1').textContent = order.billing.address1;
                document.getElementById('detailBillingCityState').textContent = `${order.billing.city}, ${order.billing.state} ${order.billing.zip}`;
                
                const orderItemsContainer = document.getElementById('orderItemsContainer');
                orderItemsContainer.innerHTML = '';
                
                order.items.forEach(item => {
                    const itemElement = document.createElement('div');
                    itemElement.className = 'order-product';
                    
                    itemElement.innerHTML = `
                        <img src="${item.image}" alt="${item.title}" class="order-product-image">
                        <div class="flex-grow-1">
                            <div class="fw-semibold">${item.title}</div>
                            <div class="d-flex justify-content-between">
                                <small class="text-muted">Qty: ${item.quantity}</small>
                                <span>₹${(item.price * item.quantity).toFixed(2)}</span>
                            </div>
                        </div>
                    `;
                    
                    orderItemsContainer.appendChild(itemElement);
                });
                
                document.getElementById('detailSubtotal').textContent = `₹${order.summary.subtotal.toFixed(2)}`;
                document.getElementById('detailShipping').textContent = `₹${order.summary.shipping.toFixed(2)}`;
                document.getElementById('detailTax').textContent = `₹${order.summary.tax.toFixed(2)}`;
                document.getElementById('detailTotal').textContent = `₹${order.summary.total.toFixed(2)}`;
                
                const timelineContainer = document.getElementById('orderTimelineContainer');
                timelineContainer.innerHTML = '';
                
                order.timeline.forEach(event => {
                    const eventDate = new Date(event.date);
                    const formattedDate = eventDate.toLocaleString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    
                    let statusText = '';
                    let statusIcon = '';
                    switch (event.status) {
                        case 'order_placed':
                            statusText = 'Order Placed';
                            statusIcon = 'fas fa-shopping-cart';
                            break;
                        case 'payment_received':
                            statusText = 'Payment Received';
                            statusIcon = 'fas fa-credit-card';
                            break;
                        case 'pending_payment':
                            statusText = 'Pending Payment';
                            statusIcon = 'fas fa-clock';
                            break;
                        case 'processing':
                            statusText = 'Processing';
                            statusIcon = 'fas fa-cog';
                            break;
                        case 'shipped':
                            statusText = 'Shipped';
                            statusIcon = 'fas fa-truck';
                            break;
                        case 'delivered':
                            statusText = 'Delivered';
                            statusIcon = 'fas fa-check-circle';
                            break;
                        case 'cancelled':
                            statusText = 'Cancelled';
                            statusIcon = 'fas fa-times-circle';
                            break;
                        case 'refunded':
                            statusText = 'Refunded';
                            statusIcon = 'fas fa-undo';
                            break;
                        default:
                            statusText = event.status.replace('_', ' ');
                            statusIcon = 'fas fa-info-circle';
                    }
                    
                    const timelineItem = document.createElement('div');
                    timelineItem.className = 'timeline-item';
                    
                    let trackingInfo = '';
                    if (event.tracking) {
                        trackingInfo = `<div class="mt-1"><small class="text-muted">Tracking: <a href="#" class="text-primary">${event.tracking}</a></small></div>`;
                    }
                    
                    timelineItem.innerHTML = `
                        <div class="fw-semibold"><i class="${statusIcon} me-2 text-primary"></i> ${statusText}</div>
                        <div class="timeline-date">${formattedDate}</div>
                        <div class="mt-1">${event.note}</div>
                        ${trackingInfo}
                    `;
                    
                    timelineContainer.appendChild(timelineItem);
                });
                
                document.getElementById('updateOrderId').value = order.id;
                document.getElementById('orderStatus').value = order.status;
                
                const trackingContainer = document.getElementById('trackingNumberContainer');
                if (order.status === 'shipped') {
                    trackingContainer.classList.remove('d-none');
                    
                    const shippedEvent = order.timeline.find(event => event.status === 'shipped');
                    if (shippedEvent && shippedEvent.tracking) {
                        document.getElementById('trackingNumber').value = shippedEvent.tracking;
                    } else {
                        document.getElementById('trackingNumber').value = '';
                    }
                } else {
                    trackingContainer.classList.add('d-none');
                }
                
                const cancelOrderBtn = document.getElementById('cancelOrderBtn');
                if (['delivered', 'cancelled', 'refunded'].includes(order.status)) {
                    cancelOrderBtn.disabled = true;
                    cancelOrderBtn.classList.add('disabled');
                } else {
                    cancelOrderBtn.disabled = false;
                    cancelOrderBtn.classList.remove('disabled');
                }
            }
        };
        
        const OrdersController = {
            currentOrders: [],
            currentPage: 1,
            pageSize: 10,
            totalPages: 1,
            totalItems: 0,
            
            async init() {
                await this.loadOrders();
            },
            
            async loadOrders() {
                try {
                    const searchTerm = UI.elements.searchOrders?.value || '';
                    const status = UI.elements.statusFilter?.value || '';
                    const startDate = UI.elements.startDate?.value || '';
                    const endDate = UI.elements.endDate?.value || '';
                    
                    const params = {
                        search: searchTerm,
                        status: status,
                        startDate: startDate,
                        endDate: endDate,
                        page: this.currentPage,
                        limit: this.pageSize
                    };
                    
                    const data = await API.getOrders(params);
                    this.currentOrders = data.orders;
                    this.totalPages = data.totalPages;
                    this.totalItems = data.totalItems;
                    
                    const startItem = (this.currentPage - 1) * this.pageSize + 1;
                    const endItem = Math.min(startItem + this.pageSize - 1, this.totalItems);
                    
                    const pagination = {
                        currentPage: this.currentPage,
                        totalPages: this.totalPages,
                        totalItems: this.totalItems,
                        pageSize: this.pageSize,
                        startItem: startItem > this.totalItems ? 0 : startItem,
                        endItem: endItem > this.totalItems ? this.totalItems : endItem
                    };
                    
                    UI.renderOrders(this.currentOrders);
                    UI.renderPagination(pagination);
                } catch (error) {
                    UI.showToast('Error', 'Failed to load orders', 'error');
                    console.error('Error loading orders:', error);
                }
            },
            
            async loadOrderDetails(orderId) {
                try {
                    const order = await API.getOrder(orderId);
                    UI.renderOrderDetails(order);
                } catch (error) {
                    UI.showToast('Error', 'Failed to load order details', 'error');
                    console.error('Error loading order details:', error);
                }
            },
            
            async updateOrderStatus() {
                try {
                    const orderId = document.getElementById('updateOrderId').value;
                    const status = document.getElementById('orderStatus').value;
                    const trackingNumber = document.getElementById('trackingNumber').value;
                    const note = document.getElementById('statusNote').value;
                    const notifyCustomer = document.getElementById('notifyCustomer').checked;
                    
                    const statusData = {
                        status,
                        note,
                        notifyCustomer
                    };
                    
                    if (status === 'shipped' && trackingNumber) {
                        statusData.tracking = trackingNumber;
                    }
                    
                    await API.updateOrderStatus(orderId, statusData);
                    
                    const modal = bootstrap.Modal.getInstance(document.getElementById('updateStatusModal'));
                    modal.hide();
                    
                    const detailsModal = bootstrap.Modal.getInstance(document.getElementById('orderDetailsModal'));
                    detailsModal.hide();
                    
                    await this.loadOrders();
                    
                    UI.showToast('Success', `Order status updated to ${status}`);
                } catch (error) {
                    UI.showToast('Error', 'Failed to update order status', 'error');
                    console.error('Error updating order status:', error);
                }
            },
            
            async cancelOrder() {
                try {
                    const orderId = document.getElementById('cancelOrderId').value;
                    const reason = document.getElementById('cancellationReason').value;
                    const note = document.getElementById('cancellationNote').value;
                    const notifyCustomer = document.getElementById('notifyCustomerCancel').checked;
                    
                    const cancellationData = {
                        reason,
                        note,
                        notifyCustomer
                    };
                    
                    await API.cancelOrder(orderId, cancellationData);
                    
                    const modal = bootstrap.Modal.getInstance(document.getElementById('cancelOrderModal'));
                    modal.hide();
                    
                    const detailsModal = bootstrap.Modal.getInstance(document.getElementById('orderDetailsModal'));
                    detailsModal.hide();
                    
                    await this.loadOrders();
                    
                    UI.showToast('Success', 'Order has been cancelled');
                } catch (error) {
                    UI.showToast('Error', 'Failed to cancel order', 'error');
                    console.error('Error cancelling order:', error);
                }
            },
            
            printOrder(orderId) {
                UI.showToast('Print', `Printing order ${orderId}`);
                window.print();
            },
            
            exportOrderPDF(orderId) {
                UI.showToast('Export', `Order ${orderId} exported as PDF`);
            },
            
            showCancelOrderModal(orderId) {
                document.getElementById('cancelOrderId').value = orderId;
                const cancelOrderModal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
                cancelOrderModal.show();
            }
        };
        
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            UI.init();
            OrdersController.init();
        });
    </script>

    <script>
        Object.assign(API, {
        async getOrderStatusCounts() {
            try {
                const response = await fetch(`${this.baseUrl}/orders/status-counts`, {
                    signal: AbortSignal.timeout(5000)
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch order status counts');
                }
                
                return await response.json();
            } catch (error) {
                console.warn('API request failed, using mock data:', error);
                await new Promise(resolve => setTimeout(resolve, 500));
                
                return {
                    total: 24,
                    completed: 18,
                    pending: 5,
                    cancelled: 1
                };
            }
        },
        
        async getNotifications() {
            try {
                const response = await fetch(`${this.baseUrl}/notifications`, {
                    signal: AbortSignal.timeout(5000)
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch notifications');
                }
                
                return await response.json();
            } catch (error) {
                console.warn('API request failed, using mock data:', error);
                await new Promise(resolve => setTimeout(resolve, 700));
                
                return {
                    count: 3,
                    notifications: [
                        {
                            id: 1,
                            type: 'order',
                            title: 'New order received',
                            message: 'Order #ORD-12350 has been placed',
                            time: '15 minutes ago',
                            icon: 'shopping-cart',
                            iconBg: 'success',
                            isNew: true
                        },
                        {
                            id: 2,
                            type: 'shipping',
                            title: 'Order #1234 shipped',
                            message: 'Order has been shipped via USPS',
                            time: '2 hours ago',
                            icon: 'truck',
                            iconBg: 'primary',
                            isNew: true
                        },
                        {
                            id: 3,
                            type: 'review',
                            title: 'New review received',
                            message: 'Customer left a 5-star review',
                            time: '1 hour ago',
                            icon: 'comment',
                            iconBg: 'info',
                            isNew: true
                        }
                    ]
                };
            }
        }
    });
    
    Object.assign(OrdersController, {
        async loadOrderStatusCounts() {
            try {
                const counts = await API.getOrderStatusCounts();
                
                document.getElementById('totalOrdersCount').textContent = counts.total;
                document.getElementById('completedOrdersCount').textContent = counts.completed;
                document.getElementById('pendingOrdersCount').textContent = counts.pending;
                document.getElementById('cancelledOrdersCount').textContent = counts.cancelled;
            } catch (error) {
                console.error('Error loading order status counts:', error);
                UI.showToast('Error', 'Failed to load order statistics', 'error');
            }
        },
        
        async loadNotifications() {
            try {
                const data = await API.getNotifications();
                
                const notificationCount = document.getElementById('notificationCount');
                notificationCount.textContent = data.count;
                
                if (data.count === 0) {
                    notificationCount.style.display = 'none';
                } else {
                    notificationCount.style.display = 'flex';
                }
                
                const notificationsContainer = document.getElementById('notificationsContainer');
                
                if (data.notifications.length === 0) {
                    notificationsContainer.innerHTML = `
                        <div class="dropdown-item text-center py-3">
                            <i class="fas fa-bell-slash text-muted fa-2x mb-2"></i>
                            <p class="mb-0 text-muted">No new notifications</p>
                        </div>
                    `;
                    return;
                }
                
                notificationsContainer.innerHTML = '';
                
                data.notifications.forEach(notification => {
                    const notificationItem = document.createElement('li');
                    notificationItem.innerHTML = `
                        <a class="dropdown-item d-flex align-items-center py-2" href="#">
                            <div class="flex-shrink-0">
                                <i class="fas fa-${notification.icon} bg-${notification.iconBg} text-white p-2 rounded"></i>
                            </div>
                            <div class="ms-3">
                                <p class="mb-0 fw-semibold">${notification.title}</p>
                                <small class="text-muted">${notification.time}</small>
                            </div>
                            ${notification.isNew ? '<div class="ms-auto"><span class="badge bg-primary rounded-pill">New</span></div>' : ''}
                        </a>
                    `;
                    notificationsContainer.appendChild(notificationItem);
                });
            } catch (error) {
                console.error('Error loading notifications:', error);
                
                const notificationsContainer = document.getElementById('notificationsContainer');
                notificationsContainer.innerHTML = `
                    <div class="dropdown-item text-center py-3">
                        <i class="fas fa-exclamation-circle text-danger mb-2"></i>
                        <p class="mb-0 text-muted">Failed to load notifications</p>
                    </div>
                `;
            }
        }
    });
    
    const originalInit = OrdersController.init;
    OrdersController.init = async function() {
        await originalInit.call(this);
        await this.loadOrderStatusCounts();
        await this.loadNotifications();
    };
    
    document.getElementById('notificationsDropdown').addEventListener('click', () => {
        OrdersController.loadNotifications();
    });
    
    const originalRefreshOrdersBtn = UI.elements.refreshOrdersBtn.onclick;
    UI.elements.refreshOrdersBtn.onclick = async () => {
        if (originalRefreshOrdersBtn) {
            originalRefreshOrdersBtn();
        } else {
            await OrdersController.loadOrders();
        }
        await OrdersController.loadOrderStatusCounts();
    };
</script>
</body>
</html>