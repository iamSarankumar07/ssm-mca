<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Store | Product Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        :root {
            --primary-color: #4f46e5;
            --primary-hover: #4338ca;
            --secondary-color: #6366f1;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --info-color: #06b6d4;
            --light-bg: #f9fafb;
            --border-radius: 0.5rem;
            --card-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --transition: all 0.2s ease-in-out;
        }
        
        body {
            background-color: #f3f4f6;
            font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            color: #1f2937;
            overflow-x: hidden;
        }
        
        .app-header {
            background-color: #ffffff;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            padding: 1rem 1.5rem;
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.95);
        }
        
        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            margin-bottom: 1.5rem;
            transition: var(--transition);
            overflow: hidden;
            background-color: #ffffff;
        }
        
        .card:hover {
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .card-header {
            background-color: #ffffff;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            padding: 1.25rem 1.5rem;
            border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .btn {
            font-weight: 500;
            border-radius: var(--border-radius);
            padding: 0.625rem 1.25rem;
            transition: var(--transition);
            letter-spacing: 0.025em;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            box-shadow: 0 2px 4px rgba(79, 70, 229, 0.2);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(79, 70, 229, 0.3);
        }
        
        .btn-outline-primary {
            color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(79, 70, 229, 0.2);
        }
        
        .table {
            border-collapse: separate;
            border-spacing: 0;
            margin-bottom: 0;
        }
        
        .table th {
            font-weight: 600;
            color: #4b5563;
            border-bottom-width: 1px;
            padding: 1rem;
            background-color: #f9fafb;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
        }
        
        .table td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .table tr {
            transition: var(--transition);
        }
        
        .table tr:hover {
            background-color: rgba(79, 70, 229, 0.02);
        }
        
        .product-image {
            width: 56px;
            height: 56px;
            object-fit: cover;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: var(--transition);
            border: 2px solid #ffffff;
        }
        
        .product-image:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
        }
        
        .badge-status {
            padding: 0.4rem 0.65rem;
            font-weight: 500;
            border-radius: 9999px;
            font-size: 0.75rem;
            letter-spacing: 0.025em;
        }
        
        .search-container {
            position: relative;
        }
        
        .search-container i {
            position: absolute;
            top: 50%;
            left: 1rem;
            transform: translateY(-50%);
            color: #9ca3af;
            z-index: 1;
        }
        
        .search-input {
            padding: 0.75rem 1rem 0.75rem 2.75rem;
            border-radius: var(--border-radius);
            border: 1px solid rgba(0, 0, 0, 0.1);
            transition: var(--transition);
            font-size: 0.95rem;
            background-color: #f9fafb;
        }
        
        .search-input:focus {
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.15);
            border-color: var(--primary-color);
            background-color: #ffffff;
        }
        
        .form-select, .form-control {
            border-radius: var(--border-radius);
            padding: 0.75rem 1rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            transition: var(--transition);
            font-size: 0.95rem;
            background-color: #f9fafb;
        }
        
        .form-select:focus, .form-control:focus {
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.15);
            border-color: var(--primary-color);
            background-color: #ffffff;
        }
        
        .modal-content {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .modal-header {
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
        }
        
        .modal-footer {
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
        }
        
        .pagination {
            margin-bottom: 0;
            gap: 0.25rem;
        }
        
        .page-item:first-child .page-link {
            border-top-left-radius: var(--border-radius);
            border-bottom-left-radius: var(--border-radius);
        }
        
        .page-item:last-child .page-link {
            border-top-right-radius: var(--border-radius);
            border-bottom-right-radius: var(--border-radius);
        }
        
        .page-link {
            color: var(--primary-color);
            transition: var(--transition);
            border-radius: var(--border-radius);
            margin: 0 2px;
            padding: 0.5rem 0.75rem;
            font-weight: 500;
        }
        
        .page-link:hover {
            background-color: rgba(79, 70, 229, 0.1);
            color: var(--primary-color);
            transform: translateY(-1px);
        }
        
        .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            box-shadow: 0 2px 4px rgba(79, 70, 229, 0.2);
        }
        
        #pageSizeSelect {
            width: 130px !important;
            display: inline-block;
            padding: 0.375rem 2.25rem 0.375rem 0.75rem;
            font-size: 0.875rem;
            height: calc(1.5em + 0.75rem + 2px);
        }
        
        .toast-container {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1100;
        }
        
        .toast {
            background-color: white;
            border: none;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            min-width: 300px;
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.95);
        }
        
        .spinner-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            visibility: hidden;
            opacity: 0;
            transition: var(--transition);
            backdrop-filter: blur(5px);
        }
        
        .spinner-overlay.show {
            visibility: visible;
            opacity: 1;
        }
        
        .spinner-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: white;
            padding: 2rem;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        
        .recent-orders-card {
            height: 100%;
        }
        
        .recent-order-item {
            border-left: 3px solid var(--primary-color);
            padding: 1.25rem;
            margin-bottom: 1rem;
            transition: var(--transition);
            background-color: rgba(255, 255, 255, 0.5);
            border-radius: 0 var(--border-radius) var(--border-radius) 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .recent-order-item:hover {
            transform: translateX(5px);
            background-color: rgba(255, 255, 255, 0.9);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .recent-order-item:last-child {
            margin-bottom: 0;
        }
        
        .back-button {
            display: inline-flex;
            align-items: center;
            color: var(--primary-color);
            font-weight: 500;
            transition: var(--transition);
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
        }
        
        .back-button:hover {
            color: var(--primary-hover);
            transform: translateX(-3px);
            background-color: rgba(79, 70, 229, 0.1);
        }
        
        .back-button i {
            margin-right: 0.5rem;
        }
        
        .image-preview-container {
            width: 100%;
            height: 200px;
            border: 2px dashed #d1d5db;
            border-radius: var(--border-radius);
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            position: relative;
            transition: var(--transition);
            margin-bottom: 1rem;
            background-color: #f9fafb;
            cursor: pointer;
        }
        
        .image-preview-container:hover {
            border-color: var(--primary-color);
            background-color: rgba(79, 70, 229, 0.02);
        }
        
        .image-preview-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #9ca3af;
        }
        
        .image-preview-placeholder i {
            font-size: 2.5rem;
            margin-bottom: 0.75rem;
            color: var(--primary-color);
        }
        
        .image-preview {
            width: 100%;
            height: 100%;
            object-fit: contain;
            display: none;
        }
        
        .image-preview.show {
            display: block;
        }
        
        .image-preview-remove {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            opacity: 0;
            transition: var(--transition);
            color: var(--danger-color);
            border: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .image-preview-container:hover .image-preview-remove {
            opacity: 1;
        }
        
        .notification-badge {
            position: relative;
        }
        
        .notification-badge .badge {
            position: absolute;
            top: -5px;
            right: -5px;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 0.65rem;
            padding: 0;
            background-color: var(--danger-color);
            box-shadow: 0 2px 4px rgba(239, 68, 68, 0.2);
        }
        
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem 1rem;
            text-align: center;
        }
        
        .empty-state i {
            font-size: 3rem;
            color: #d1d5db;
            margin-bottom: 1rem;
        }
        
        .empty-state h5 {
            color: #4b5563;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }
        
        .empty-state p {
            color: #9ca3af;
            margin-bottom: 1.5rem;
            max-width: 300px;
            line-height: 1.5;
        }
        
         .btn-retry {
            font-size: 0.875rem;
            padding: 0.4rem 0.75rem; 
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            display: inline-flex;
            align-items: center;
            gap: 0.3rem;
        }
        
        .skeleton {
            background: linear-gradient(90deg, #f3f4f6 0%, #e5e7eb 50%, #f3f4f6 100%);
            background-size: 200% 100%;
            animation: skeleton-loading 1.5s ease-in-out infinite;
            border-radius: var(--border-radius);
        }
        
        @keyframes skeleton-loading {
            0% {
                background-position: 200% 0;
            }
            100% {
                background-position: -200% 0;
            }
        }
        
        .skeleton-text {
            height: 1rem;
            margin-bottom: 0.5rem;
            width: 100%;
        }
        
        .skeleton-text.sm {
            height: 0.75rem;
            width: 80%;
        }
        
        .skeleton-circle {
            width: 56px;
            height: 56px;
            border-radius: 50%;
        }
        
        .skeleton-button {
            height: 2.5rem;
            width: 8rem;
        }
        
        .product-details-modal .modal-dialog {
            max-width: 900px;
        }
        
        .product-details-header {
            background-color: var(--light-bg);
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            padding: 2rem;
            position: relative;
        }
        
        .product-cover-large {
            width: 100%;
            height: 300px;
            object-fit: contain;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            background-color: white;
            transition: var(--transition);
        }
        
        .product-cover-large:hover {
            transform: scale(1.02);
        }
        
        .product-details-body {
            padding: 2rem;
        }
        
        .product-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .product-meta-item {
            display: flex;
            align-items: center;
            padding: 0.5rem 1rem;
            background-color: var(--light-bg);
            border-radius: var(--border-radius);
            font-size: 0.875rem;
        }
        
        .product-meta-item i {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }
        
        .product-description {
            background-color: var(--light-bg);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            margin-bottom: 1.5rem;
            position: relative;
        }
        
        .product-description::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background-color: var(--primary-color);
            border-radius: var(--border-radius) 0 0 var(--border-radius);
        }
        
        .product-stats {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .stat-card {
            background-color: white;
            border-radius: var(--border-radius);
            padding: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transition: var(--transition);
            border-left: 3px solid var(--primary-color);
        }
        
        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .stat-card .stat-title {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: #6b7280;
            margin-bottom: 0.5rem;
        }
        
        .stat-card .stat-value {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1f2937;
        }
        
        .product-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        .product-actions .btn {
            flex: 1;
        }
        
        .product-price-tag {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            background-color: var(--primary-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            font-size: 1.25rem;
            box-shadow: 0 4px 6px rgba(79, 70, 229, 0.3);
            transform: rotate(3deg);
            z-index: 1;
        }
        
        .product-price-tag::before {
            content: '';
            position: absolute;
            top: -5px;
            right: 10px;
            width: 10px;
            height: 10px;
            background-color: var(--primary-hover);
            border-radius: 50%;
        }
        
        .product-rating {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .product-rating .stars {
            display: flex;
            margin-right: 0.5rem;
        }
        
        .product-rating .stars i {
            color: var(--warning-color);
            margin-right: 0.25rem;
        }
        
        .product-rating .review-count {
            color: #6b7280;
            font-size: 0.875rem;
        }
        
        .related-products {
            margin-top: 2rem;
        }
        
        .related-products h6 {
            margin-bottom: 1rem;
            font-weight: 600;
            color: #4b5563;
        }
        
        .related-product-list {
            display: flex;
            gap: 1rem;
            overflow-x: auto;
            padding-bottom: 1rem;
        }
        
        .related-product-item {
            flex: 0 0 auto;
            width: 120px;
            text-align: center;
            transition: var(--transition);
        }
        
        .related-product-item:hover {
            transform: translateY(-3px);
        }
        
        .related-product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: var(--border-radius);
            margin-bottom: 0.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border: 2px solid white;
        }
        
        .related-product-title {
            font-size: 0.75rem;
            font-weight: 500;
            color: #4b5563;
            margin-bottom: 0.25rem;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .related-product-price {
            font-size: 0.75rem;
            font-weight: 600;
            color: var(--primary-color);
        }
        
        @media (max-width: 768px) {
            .card-header {
                flex-direction: column;
                align-items: flex-start !important;
                padding: 1.25rem;
            }
            
            .card-header .btn {
                margin-top: 1rem;
                align-self: flex-start;
                width: 100%;
            }
            
            .filter-row {
                flex-direction: column;
                gap: 1rem;
            }
            
            .filter-row > div {
                margin-bottom: 0;
                width: 100%;
            }
            
            .table-responsive {
                border-radius: var(--border-radius);
                box-shadow: var(--card-shadow);
            }
            
            .table th {
                white-space: nowrap;
            }
            
            .product-details-modal .modal-dialog {
                margin: 0.5rem;
            }
            
            .product-details-header {
                padding: 1.5rem;
            }
            
            .product-cover-large {
                height: 200px;
            }
            
            .product-price-tag {
                top: 1rem;
                right: 1rem;
                padding: 0.5rem 1rem;
                font-size: 1rem;
            }
            
            .product-details-body {
                padding: 1.5rem;
            }
            
            .product-stats {
                grid-template-columns: 1fr;
            }
            
            .product-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="spinner-overlay" id="loadingSpinner">
        <div class="spinner-container">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mb-0">Loading data...</p>
        </div>
    </div>
    
    <div class="toast-container" id="toastContainer"></div>
    
    <header class="app-header">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <a href="/v1/api/dashboard" class="back-button me-4">
                        <i class="fas fa-arrow-left"></i> Back
                    </a>
                    <h4 class="mb-0">
                        <i class="fas fa-book me-2 text-primary"></i>
                        Book Store Management
                    </h4>
                </div>
                <div class="d-flex align-items-center gap-3">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary notification-badge" type="button" id="notificationsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-bell"></i>
                            <span class="badge bg-danger" id="notificationCount"></span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="notificationsDropdown" style="min-width: 300px;" id="notificationsMenu">
                            <li>
                                <h6 class="dropdown-header">Notifications</h6>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li id="notificationsEmpty" class="d-none">
                                <div class="px-3 py-2 text-center">
                                    <i class="fas fa-bell-slash text-muted"></i>
                                    <p class="mb-0 small">No new notifications</p>
                                </div>
                            </li>
                            <li id="notificationsLoading">
                                <div class="px-3 py-2 text-center">
                                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mb-0 small">Loading notifications...</p>
                                </div>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item text-center" href="#">View all notifications</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </header>
    
    <main class="container-fluid py-4">
        <div class="row">
            <div class="col-lg-8 mb-4 mb-lg-0">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Product Management</h5>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
                            <i class="fas fa-plus me-1"></i> Add Product
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3 filter-row">
                            <div class="col-md-6 mb-2 mb-md-0">
                                <div class="search-container">
                                    <input type="text" class="form-control search-input" id="searchProducts" placeholder="Search products...">
                                </div>
                            </div>
                            <div class="col-md-3 mb-2 mb-md-0">
                                <select class="form-select" id="departmentFilter">
                                    <option selected value="">All Departments</option>
                                    <option>BCA</option>
                                    <option>MCA</option>
                                    <option>MBA</option>
                                    <option>EEE</option>
                                    <option>ECE</option>
                                    <option>CSE</option>
                                    <option>Mechanical</option>
                                    <option>Civil</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="formatFilter">
                                    <option selected value="">All Formats</option>
                                    <option value="hardcover">Hardcover</option>
                                    <option value="paperback">Paperback</option>
                                    <option value="ebook">E-Book</option>
                                </select>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-hover align-middle" id="productsTable">
                                <thead>
                                    <tr>
                                        <th>Cover</th>
                                        <th>Title</th>
                                        <th>Department</th>
                                        <th>Format</th>
                                        <th>Price</th>
                                        <th>Stock</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="productsTableBody">
                                    <tr class="skeleton-row">
                                        <td><div class="skeleton skeleton-circle"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-button"></div></td>
                                    </tr>
                                    <tr class="skeleton-row">
                                        <td><div class="skeleton skeleton-circle"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-button"></div></td>
                                    </tr>
                                    <tr class="skeleton-row">
                                        <td><div class="skeleton skeleton-circle"></div></td>
                                        <td>
                                            <div class="skeleton skeleton-text"></div>
                                            <div class="skeleton skeleton-text sm"></div>
                                        </td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-text"></div></td>
                                        <td><div class="skeleton skeleton-button"></div></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div id="paginationContainer" class="mt-4">
                            <div class="d-flex justify-content-between align-items-center flex-wrap">
                                <div class="d-flex align-items-center mb-2 mb-md-0">
                                    <select class="form-select form-select-sm me-2" id="pageSizeSelect">
                                        <option value="10">10 per page</option>
                                        <option value="25">25 per page</option>
                                        <option value="50">50 per page</option>
                                        <option value="100">100 per page</option>
                                    </select>
                                    <span class="text-muted small" id="paginationInfo">Loading...</span>
                                </div>
                                <nav aria-label="Page navigation" id="productsPagination">
                                    <ul class="pagination pagination-sm">
                                        <li class="page-item disabled">
                                            <a class="page-link" href="#" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                            </a>
                                        </li>
                                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                        <li class="page-item disabled">
                                            <a class="page-link" href="#" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-4">
                <div class="card recent-orders-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Recent Orders</h5>
                        <a href="#" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                    <div class="card-body" id="recentOrdersContainer">
                        <div class="recent-order-item">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div>
                                    <div class="skeleton skeleton-text" style="width: 120px;"></div>
                                    <div class="skeleton skeleton-text sm" style="width: 80px;"></div>
                                </div>
                                <div class="skeleton skeleton-text" style="width: 70px;"></div>
                            </div>
                            <div class="d-flex justify-content-between">
                                <div class="skeleton skeleton-text sm" style="width: 150px;"></div>
                                <div class="skeleton skeleton-text" style="width: 60px;"></div>
                            </div>
                        </div>
                        <div class="recent-order-item">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div>
                                    <div class="skeleton skeleton-text" style="width: 120px;"></div>
                                    <div class="skeleton skeleton-text sm" style="width: 80px;"></div>
                                </div>
                                <div class="skeleton skeleton-text" style="width: 70px;"></div>
                            </div>
                            <div class="d-flex justify-content-between">
                                <div class="skeleton skeleton-text sm" style="width: 150px;"></div>
                                <div class="skeleton skeleton-text" style="width: 60px;"></div>
                            </div>
                        </div>
                        <div class="recent-order-item">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div>
                                    <div class="skeleton skeleton-text" style="width: 120px;"></div>
                                    <div class="skeleton skeleton-text sm" style="width: 80px;"></div>
                                </div>
                                <div class="skeleton skeleton-text" style="width: 70px;"></div>
                            </div>
                            <div class="d-flex justify-content-between">
                                <div class="skeleton skeleton-text sm" style="width: 150px;"></div>
                                <div class="skeleton skeleton-text" style="width: 60px;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addProductModalLabel">Add New Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addProductForm">
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <div class="image-preview-container" id="addImagePreviewContainer">
                                    <div class="image-preview-placeholder" id="addImagePreviewPlaceholder">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                        <p class="mb-0">Click to upload or drag and drop</p>
                                        <small class="text-muted">SVG, PNG, JPG or GIF (max. 2MB)</small>
                                    </div>
                                    <img src="/placeholder.svg" alt="Preview" class="image-preview" id="addImagePreview">
                                    <button type="button" class="image-preview-remove" id="addImagePreviewRemove">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <input class="form-control d-none" type="file" id="productCover" name="cover" accept="image/*">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <label for="productTitle" class="form-label">Title</label>
                                <input type="text" class="form-control" id="productTitle" name="title" required>
                            </div>
                            <div class="col-md-4">
                                <label for="productPrice" class="form-label">Price (₹)</label>
                                <input type="number" class="form-control" id="productPrice" name="price" min="0" step="0.01" required>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="productDepartment" class="form-label">Department</label>
                                <select class="form-select" id="productDepartment" name="department" required>
                                    <option value="" selected disabled>Select Department</option>
                                    <option>BCA</option>
                                    <option>MCA</option>
                                    <option>MBA</option>
                                    <option>EEE</option>
                                    <option>ECE</option>
                                    <option>CSE</option>
                                    <option>Mechanical</option>
                                    <option>Civil</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="productFormat" class="form-label">Format</label>
                                <select class="form-select" id="productFormat" name="format" required>
                                    <option value="" selected disabled>Select Format</option>
                                    <option value="hardcover">Hardcover</option>
                                    <option value="paperback">Paperback</option>
                                    <option value="ebook">E-Book</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="productDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="productDescription" name="description" rows="3"></textarea>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="productStock" class="form-label">Stock Quantity</label>
                                <input type="number" class="form-control" id="productStock" name="stock" min="0" step="1">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveProductBtn">Add Product</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm">
                        <input type="hidden" id="editProductId" name="id">
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <div class="image-preview-container" id="editImagePreviewContainer">
                                    <div class="image-preview-placeholder" id="editImagePreviewPlaceholder">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                        <p class="mb-0">Click to upload or drag an image here</p>
                                        <small class="text-muted">SVG, PNG, JPG or GIF (max. 2MB)</small>
                                    </div>
                                    <img src="/placeholder.svg" alt="Preview" class="image-preview" id="editImagePreview">
                                    <button type="button" class="image-preview-remove" id="editImagePreviewRemove">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <input class="form-control d-none" type="file" id="editProductCover" name="cover" accept="image/*">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <label for="editProductTitle" class="form-label">Title</label>
                                <input type="text" class="form-control" id="editProductTitle" name="title" required>
                            </div>
                            <div class="col-md-4">
                                <label for="editProductPrice" class="form-label">Price (₹)</label>
                                <input type="number" class="form-control" id="editProductPrice" name="price" min="0" step="0.01" required>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editProductAuthor" class="form-label">Author</label>
                                <input type="text" class="form-control" id="editProductAuthor" name="author" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editProductISBN" class="form-label">ISBN</label>
                                <input type="text" class="form-control" id="editProductISBN" name="isbn" required>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editProductDepartment" class="form-label">Department</label>
                                <select class="form-select" id="editProductDepartment" name="department" required>
                                    <option value="" selected disabled>Select Department</option>
                                    <option>BCA</option>
                                    <option>MCA</option>
                                    <option>MBA</option>
                                    <option>EEE</option>
                                    <option>ECE</option>
                                    <option>CSE</option>
                                    <option>Mechanical</option>
                                    <option>Civil</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editProductFormat" class="form-label">Format</label>
                                <select class="form-select" id="editProductFormat" name="format" required>
                                    <option value="" selected disabled>Select Format</option>
                                    <option value="hardcover">Hardcover</option>
                                    <option value="paperback">Paperback</option>
                                    <option value="ebook">E-Book</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editProductDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editProductDescription" name="description" rows="3"></textarea>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editProductYear" class="form-label">Publication Year</label>
                                <input type="number" class="form-control" id="editProductYear" name="year" min="1900" max="2099" step="1">
                            </div>
                            <div class="col-md-6">
                                <label for="editProductPublisher" class="form-label">Publisher</label>
                                <input type="text" class="form-control" id="editProductPublisher" name="publisher">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editProductStock" class="form-label">Stock Quantity</label>
                                <input type="number" class="form-control" id="editProductStock" name="stock" min="0" step="1">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="updateProductBtn">Update Product</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-3">
                        <i class="fas fa-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                    </div>
                    <p class="text-center">Are you sure you want to delete this product? This action cannot be undone.</p>
                    <input type="hidden" id="deleteProductId">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal fade product-details-modal" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title" id="productDetailsModalLabel">Product Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="product-details-header">
                    <div class="product-price-tag" id="detailsProductPrice">₹599.00</div>
                    <div class="row">
                        <div class="col-md-5 mb-3 mb-md-0">
                            <img src="/placeholder.svg?height=300&width=300" alt="Product Cover" class="product-cover-large" id="detailsProductCover">
                        </div>
                        <div class="col-md-7">
                            <h4 class="mb-2" id="detailsProductTitle">Advanced Database Management Systems</h4>
                            <p class="text-muted mb-2" id="detailsProductAuthor">By Dr. Rajesh Kumar</p>
                            
                            <div class="product-rating mb-3">
                                <div class="stars">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star-half-alt"></i>
                                </div>
                                <span class="review-count">(24 reviews)</span>
                            </div>
                            
                            <div class="product-meta">
                                <div class="product-meta-item" id="detailsProductDepartment">
                                    <i class="fas fa-graduation-cap"></i>
                                    <span>MCA</span>
                                </div>
                                <div class="product-meta-item" id="detailsProductFormat">
                                    <i class="fas fa-book"></i>
                                    <span>Hardcover</span>
                                </div>
                                <div class="product-meta-item" id="detailsProductYear">
                                    <i class="fas fa-calendar-alt"></i>
                                    <span>2023</span>
                                </div>
                                <div class="product-meta-item" id="detailsProductISBN">
                                    <i class="fas fa-barcode"></i>
                                    <span>ISBN: 978-3-16-148410-0</span>
                                </div>
                            </div>
                            
                            <div class="d-flex align-items-center mt-3">
                                <div class="me-3">
                                    <span class="badge bg-success badge-status" id="detailsProductStock">In Stock (45)</span>
                                </div>
                                <div>
                                    <span class="badge bg-info badge-status" id="detailsProductPublisher">
                                        <i class="fas fa-building me-1"></i> 
                                        <span>Tech Publications</span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="product-details-body">
                    <h6 class="mb-3">Description</h6>
                    <div class="product-description mb-4">
                        <p class="mb-0" id="detailsProductDescription">
                            This comprehensive textbook covers advanced concepts in database management systems including distributed databases, NoSQL, data warehousing, and big data analytics. Perfect for graduate-level computer science students.
                        </p>
                    </div>
                    
                    <h6 class="mb-3">Product Statistics</h6>
                    <div class="product-stats">
                        <div class="stat-card">
                            <div class="stat-title">Sales This Month</div>
                            <div class="stat-value">42</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">Total Sales</div>
                            <div class="stat-value">358</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">Page Views</div>
                            <div class="stat-value">1,245</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">Conversion Rate</div>
                            <div class="stat-value">3.4%</div>
                        </div>
                    </div>
                    
                    <div class="related-products">
                        <h6>Related Products</h6>
                        <div class="related-product-list">
                            <div class="related-product-item">
                                <img src="/placeholder.svg?height=80&width=80" alt="Related Product" class="related-product-image">
                                <div class="related-product-title">Database Design Principles</div>
                                <div class="related-product-price">₹450</div>
                            </div>
                            <div class="related-product-item">
                                <img src="/placeholder.svg?height=80&width=80" alt="Related Product" class="related-product-image">
                                <div class="related-product-title">SQL Programming Guide</div>
                                <div class="related-product-price">₹350</div>
                            </div>
                            <div class="related-product-item">
                                <img src="/placeholder.svg?height=80&width=80" alt="Related Product" class="related-product-image">
                                <div class="related-product-title">Big Data Analytics</div>
                                <div class="related-product-price">₹650</div>
                            </div>
                            <div class="related-product-item">
                                <img src="/placeholder.svg?height=80&width=80" alt="Related Product" class="related-product-image">
                                <div class="related-product-title">Cloud Database Systems</div>
                                <div class="related-product-price">₹550</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="product-actions">
                        <button class="btn btn-outline-primary" id="editProductDetailsBtn">
                            <i class="fas fa-edit me-2"></i> Edit Product
                        </button>
                        <button class="btn btn-primary" id="addToCartBtn">
                            <i class="fas fa-shopping-cart me-2"></i> Add to Cart
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const API = {
            baseUrl: '/api',
            
            async getProducts(params = {}) {
                try {
                    UI.showLoading();
                    const queryParams = new URLSearchParams(params).toString();
                    const response = await fetch(`${this.baseUrl}/products?${queryParams}`);
                    
                    if (!response.ok) {
                        throw new Error('Failed to fetch products');
                    }
                    
                    const data = await response.json();
                    return data;
                } catch (error) {
                    console.error('Error fetching products:', error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            },
            
            async getProduct(id) {
                try {
                    UI.showLoading();
                    const response = await fetch(`${this.baseUrl}/products/${id}`);
                    
                    if (!response.ok) {
                        throw new Error('Failed to fetch product');
                    }
                    
                    const product = await response.json();
                    return product;
                } catch (error) {
                    console.error(`Error fetching product ${id}:`, error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            },
            
            async createProduct(productData) {
                try {
                    UI.showLoading();
                    const formData = new FormData();
                    
                    for (const key in productData) {
                        formData.append(key, productData[key]);
                    }
                    
                    const response = await fetch(`${this.baseUrl}/products`, {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to create product');
                    }
                    
                    const newProduct = await response.json();
                    return newProduct;
                } catch (error) {
                    console.error('Error creating product:', error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            },
            
            async updateProduct(id, productData) {
                try {
                    UI.showLoading();
                    const formData = new FormData();
                    
                    for (const key in productData) {
                        formData.append(key, productData[key]);
                    }
                    
                    const response = await fetch(`${this.baseUrl}/products/${id}`, {
                        method: 'PUT',
                        body: formData
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to update product');
                    }
                    
                    const updatedProduct = await response.json();
                    return updatedProduct;
                } catch (error) {
                    console.error(`Error updating product ${id}:`, error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            },
            
            async deleteProduct(id) {
                try {
                    UI.showLoading();
                    const response = await fetch(`${this.baseUrl}/products/${id}`, {
                        method: 'DELETE'
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to delete product');
                    }
                    
                    return { success: true };
                } catch (error) {
                    console.error(`Error deleting product ${id}:`, error);
                    throw error;
                } finally {
                    UI.hideLoading();
                }
            },
            
            async getRecentOrders(limit = 5) {
                try {
                    const response = await fetch(`${this.baseUrl}/orders/recent?limit=${limit}`);
                    
                    if (!response.ok) {
                        throw new Error('Failed to fetch recent orders');
                    }
                    
                    const orders = await response.json();
                    return orders;
                } catch (error) {
                    console.error('Error fetching recent orders:', error);
                    throw error;
                }
            },
            
            async getNotifications() {
                try {
                    const response = await fetch(`${this.baseUrl}/notifications`);
                    
                    if (!response.ok) {
                        throw new Error('Failed to fetch notifications');
                    }
                    
                    const notifications = await response.json();
                    return notifications;
                } catch (error) {
                    console.error('Error fetching notifications:', error);
                    throw error;
                }
            },
            
            async markNotificationAsRead(id) {
                try {
                    const response = await fetch(`${this.baseUrl}/notifications/${id}/read`, {
                        method: 'PUT'
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to mark notification as read');
                    }
                    
                    return { success: true };
                } catch (error) {
                    console.error(`Error marking notification ${id} as read:`, error);
                    throw error;
                }
            }
        };
        
        const UI = {
            elements: {
                loadingSpinner: document.getElementById('loadingSpinner'),
                toastContainer: document.getElementById('toastContainer'),
                
                productsTableBody: document.getElementById('productsTableBody'),
                searchProducts: document.getElementById('searchProducts'),
                departmentFilter: document.getElementById('departmentFilter'),
                formatFilter: document.getElementById('formatFilter'),
                
                productsPagination: document.getElementById('productsPagination'),
                pageSizeSelect: document.getElementById('pageSizeSelect'),
                paginationInfo: document.getElementById('paginationInfo'),
                
                recentOrdersContainer: document.getElementById('recentOrdersContainer'),
                
                notificationsMenu: document.getElementById('notificationsMenu'),
                notificationCount: document.getElementById('notificationCount'),
                notificationsEmpty: document.getElementById('notificationsEmpty'),
                notificationsLoading: document.getElementById('notificationsLoading'),
                
                addProductForm: document.getElementById('addProductForm'),
                editProductForm: document.getElementById('editProductForm'),
                
                addImagePreviewContainer: document.getElementById('addImagePreviewContainer'),
                addImagePreview: document.getElementById('addImagePreview'),
                addImagePreviewPlaceholder: document.getElementById('addImagePreviewPlaceholder'),
                addImagePreviewRemove: document.getElementById('addImagePreviewRemove'),
                productCover: document.getElementById('productCover'),
                
                editImagePreviewContainer: document.getElementById('editImagePreviewContainer'),
                editImagePreview: document.getElementById('editImagePreview'),
                editImagePreviewPlaceholder: document.getElementById('editImagePreviewPlaceholder'),
                editImagePreviewRemove: document.getElementById('editImagePreviewRemove'),
                editProductCover: document.getElementById('editProductCover'),
                
                saveProductBtn: document.getElementById('saveProductBtn'),
                updateProductBtn: document.getElementById('updateProductBtn'),
                confirmDeleteBtn: document.getElementById('confirmDeleteBtn'),
                
                productDetailsModal: document.getElementById('productDetailsModal'),
                detailsProductTitle: document.getElementById('detailsProductTitle'),
                detailsProductAuthor: document.getElementById('detailsProductAuthor'),
                detailsProductPrice: document.getElementById('detailsProductPrice'),
                detailsProductCover: document.getElementById('detailsProductCover'),
                detailsProductDepartment: document.getElementById('detailsProductDepartment'),
                detailsProductFormat: document.getElementById('detailsProductFormat'),
                detailsProductYear: document.getElementById('detailsProductYear'),
                detailsProductISBN: document.getElementById('detailsProductISBN'),
                detailsProductStock: document.getElementById('detailsProductStock'),
                detailsProductPublisher: document.getElementById('detailsProductPublisher'),
                detailsProductDescription: document.getElementById('detailsProductDescription'),
                editProductDetailsBtn: document.getElementById('editProductDetailsBtn')
            },
            
            init() {
                this.setupEventListeners();
                this.loadRecentOrders();
                this.loadNotifications();
                this.setupImagePreviews();
                
                setTimeout(() => {
                    document.querySelectorAll('.skeleton-row').forEach(row => {
                        row.style.display = 'none';
                    });
                }, 1000);
            },
            
            setupEventListeners() {
                this.elements.searchProducts?.addEventListener('input', debounce(() => {
                    ProductsController.loadProducts();
                }, 300));
                
                this.elements.departmentFilter?.addEventListener('change', () => {
                    ProductsController.loadProducts();
                });
                
                this.elements.formatFilter?.addEventListener('change', () => {
                    ProductsController.loadProducts();
                });
                
                this.elements.pageSizeSelect?.addEventListener('change', () => {
                    ProductsController.pageSize = parseInt(this.elements.pageSizeSelect.value);
                    ProductsController.currentPage = 1;
                    ProductsController.loadProducts();
                });
                
                this.elements.saveProductBtn?.addEventListener('click', () => {
                    ProductsController.saveProduct();
                });
                
                this.elements.updateProductBtn?.addEventListener('click', () => {
                    ProductsController.updateProduct();
                });
                
                this.elements.confirmDeleteBtn?.addEventListener('click', () => {
                    ProductsController.deleteProduct();
                });
                
                this.elements.editProductDetailsBtn?.addEventListener('click', () => {
                    const productId = this.elements.editProductDetailsBtn.dataset.id;
                    const detailsModal = bootstrap.Modal.getInstance(this.elements.productDetailsModal);
                    detailsModal.hide();
                    
                    setTimeout(() => {
                        ProductsController.loadProductForEdit(productId);
                        const editModal = new bootstrap.Modal(document.getElementById('editProductModal'));
                        editModal.show();
                    }, 500);
                });
                
                document.addEventListener('click', (e) => {
                    if (e.target.closest('.edit-product')) {
                        const productId = e.target.closest('.edit-product').dataset.id;
                        ProductsController.loadProductForEdit(productId);
                    }
                    
                    if (e.target.closest('.delete-product')) {
                        const productId = e.target.closest('.delete-product').dataset.id;
                        document.getElementById('deleteProductId').value = productId;
                        const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
                        deleteModal.show();
                    }
                    
                    if (e.target.closest('.view-product')) {
                        const productId = e.target.closest('.view-product').dataset.id;
                        ProductsController.loadProductDetails(productId);
                    }
                    
                    if (e.target.closest('.page-link')) {
                        e.preventDefault();
                        const pageItem = e.target.closest('.page-item');
                        if (pageItem && !pageItem.classList.contains('active') && !pageItem.classList.contains('disabled')) {
                            const page = e.target.closest('.page-link').dataset.page;
                            if (page) {
                                ProductsController.currentPage = parseInt(page);
                                ProductsController.loadProducts();
                            }
                        }
                    }
                    
                    if (e.target.closest('.dropdown-item[data-id]')) {
                        e.preventDefault();
                        const notificationId = e.target.closest('.dropdown-item').dataset.id;
                        this.markNotificationAsRead(notificationId);
                    }
                });
            },
            
            setupImagePreviews() {
                this.elements.addImagePreviewContainer?.addEventListener('click', () => {
                    this.elements.productCover.click();
                });
                
                this.elements.productCover?.addEventListener('change', (e) => {
                    this.handleImagePreview(e.target.files[0], 
                        this.elements.addImagePreview, 
                        this.elements.addImagePreviewPlaceholder,
                        this.elements.addImagePreviewRemove);
                });
                
                this.elements.addImagePreviewRemove?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.clearImagePreview(
                        this.elements.productCover,
                        this.elements.addImagePreview,
                        this.elements.addImagePreviewPlaceholder
                    );
                });
                
                this.elements.editImagePreviewContainer?.addEventListener('click', () => {
                    this.elements.editProductCover.click();
                });
                
                this.elements.editProductCover?.addEventListener('change', (e) => {
                    this.handleImagePreview(e.target.files[0], 
                        this.elements.editImagePreview, 
                        this.elements.editImagePreviewPlaceholder,
                        this.elements.editImagePreviewRemove);
                });
                
                this.elements.editImagePreviewRemove?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.clearImagePreview(
                        this.elements.editProductCover,
                        this.elements.editImagePreview,
                        this.elements.editImagePreviewPlaceholder
                    );
                });
                
                const setupDragDrop = (container, fileInput) => {
                    container.addEventListener('dragover', (e) => {
                        e.preventDefault();
                        container.classList.add('border-primary');
                    });
                    
                    container.addEventListener('dragleave', () => {
                        container.classList.remove('border-primary');
                    });
                    
                    container.addEventListener('drop', (e) => {
                        e.preventDefault();
                        container.classList.remove('border-primary');
                        
                        if (e.dataTransfer.files.length) {
                            fileInput.files = e.dataTransfer.files;
                            const event = new Event('change', { bubbles: true });
                            fileInput.dispatchEvent(event);
                        }
                    });
                };
                
                if (this.elements.addImagePreviewContainer && this.elements.productCover) {
                    setupDragDrop(this.elements.addImagePreviewContainer, this.elements.productCover);
                }
                
                if (this.elements.editImagePreviewContainer && this.elements.editProductCover) {
                    setupDragDrop(this.elements.editImagePreviewContainer, this.elements.editProductCover);
                }
            },
            
            handleImagePreview(file, previewElement, placeholderElement, removeButton) {
                if (!file) return;
                
                if (file.type.match('image.*')) {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        previewElement.src = e.target.result;
                        previewElement.classList.add('show');
                        placeholderElement.style.display = 'none';
                        removeButton.style.display = 'flex';
                    };
                    
                    reader.readAsDataURL(file);
                } else {
                    this.showToast('Error', 'Please select an image file', 'error');
                }
            },
            
            clearImagePreview(fileInput, previewElement, placeholderElement) {
                fileInput.value = '';
                previewElement.src = '';
                previewElement.classList.remove('show');
                placeholderElement.style.display = 'flex';
            },
            
            showLoading() {
                this.elements.loadingSpinner.classList.add('show');
            },
            
            hideLoading() {
                this.elements.loadingSpinner.classList.remove('show');
            },
            
            showToast(title, message, type = 'success') {
                const toastId = 'toast-' + Date.now();
                const toast = document.createElement('div');
                toast.className = 'toast';
                toast.id = toastId;
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');
                
                const toastHeader = document.createElement('div');
                toastHeader.className = 'toast-header';
                
                let iconClass = 'text-success';
                let icon = 'fas fa-check-circle';
                
                if (type === 'error') {
                    iconClass = 'text-danger';
                    icon = 'fas fa-exclamation-circle';
                } else if (type === 'warning') {
                    iconClass = 'text-warning';
                    icon = 'fas fa-exclamation-triangle';
                } else if (type === 'info') {
                    iconClass = 'text-info';
                    icon = 'fas fa-info-circle';
                }
                
                toastHeader.innerHTML = `
                    <i class="${icon} me-2 ${iconClass}"></i>
                    <strong class="me-auto">${title}</strong>
                    <small>Just now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                `;
                
                const toastBody = document.createElement('div');
                toastBody.className = 'toast-body';
                toastBody.textContent = message;
                
                toast.appendChild(toastHeader);
                toast.appendChild(toastBody);
                
                this.elements.toastContainer.appendChild(toast);
                
                const bsToast = new bootstrap.Toast(toast, {
                    autohide: true,
                    delay: 5000
                });
                
                bsToast.show();
                
                toast.addEventListener('hidden.bs.toast', () => {
                    toast.remove();
                });
            },
            
            async markNotificationAsRead(notificationId) {
                try {
                    await API.markNotificationAsRead(notificationId);
                    this.loadNotifications();
                } catch (error) {
                    console.error('Error marking notification as read:', error);
                }
            },
            
            renderProducts(products, pagination) {
                if (!this.elements.productsTableBody) return;
                
                this.elements.productsTableBody.innerHTML = '';
                
                if (products.length === 0) {
                    this.elements.productsTableBody.innerHTML = `
                        <tr id="noProductsRow">
                            <td colspan="7" class="text-center py-4">
                                <div class="empty-state">
                                    <i class="fas fa-book"></i>
                                    <h5>No products found</h5>
                                    <p>Try adjusting your search or filter to find what you're looking for.</p>
                                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
                                        <i class="fas fa-plus me-1"></i> Add Your First Product
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                    return;
                }
                
                products.forEach(product => {
                    const stockBadge = product.stock > 0 ? 
                        `<span class="badge bg-success badge-status">In Stock (${product.stock})</span>` : 
                        '<span class="badge bg-danger badge-status">Out of Stock</span>';
                    
                    const row = document.createElement('tr');
                    row.dataset.id = product.id;
                    
                    row.innerHTML = `
                        <td>
                            <img src="${product.image || '/placeholder.svg?height=60&width=60'}" alt="${product.title}" class="product-image">
                        </td>
                        <td>
                            <div class="fw-semibold">${product.title}</div>
                            <small class="text-muted">${product.author || 'Unknown'} • ${product.year || 'N/A'}</small>
                        </td>
                        <td>${product.department || 'N/A'}</td>
                        <td>
                            <span class="badge bg-secondary">${product.format || 'N/A'}</span>
                        </td>
                        <td>₹${parseFloat(product.price).toFixed(2)}</td>
                        <td>${stockBadge}</td>
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary view-product" data-id="${product.id}">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-primary edit-product" data-id="${product.id}" data-bs-toggle="modal" data-bs-target="#editProductModal">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger delete-product" data-id="${product.id}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    
                    this.elements.productsTableBody.appendChild(row);
                });
                
                if (pagination) {
                    this.renderPagination(pagination);
                }
            },
            
            renderPagination(pagination) {
                if (!this.elements.productsPagination) return;
                
                const { currentPage, totalPages, totalItems, pageSize, startItem, endItem } = pagination;
                
                if (this.elements.paginationInfo) {
                    this.elements.paginationInfo.textContent = `Showing ${startItem}-${endItem} of ${totalItems} items`;
                }
                
                if (this.elements.pageSizeSelect) {
                    this.elements.pageSizeSelect.value = pageSize;
                }
                
                const paginationList = this.elements.productsPagination.querySelector('ul');
                paginationList.innerHTML = '';
                
                const prevItem = document.createElement('li');
                prevItem.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevItem.innerHTML = `
                    <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                `;
                paginationList.appendChild(prevItem);
                
                const maxPagesToShow = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
                
                if (endPage - startPage + 1 < maxPagesToShow) {
                    startPage = Math.max(1, endPage - maxPagesToShow + 1);
                }
                
                if (startPage > 1) {
                    const firstItem = document.createElement('li');
                    firstItem.className = 'page-item';
                    firstItem.innerHTML = `<a class="page-link" href="#" data-page="1">1</a>`;
                    paginationList.appendChild(firstItem);
                    
                    if (startPage > 2) {
                        const ellipsisItem = document.createElement('li');
                        ellipsisItem.className = 'page-item disabled';
                        ellipsisItem.innerHTML = `<a class="page-link" href="#">...</a>`;
                        paginationList.appendChild(ellipsisItem);
                    }
                }
                
                for (let i = startPage; i <= endPage; i++) {
                    const pageItem = document.createElement('li');
                    pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageItem.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    paginationList.appendChild(pageItem);
                }
                
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        const ellipsisItem = document.createElement('li');
                        ellipsisItem.className = 'page-item disabled';
                        ellipsisItem.innerHTML = `<a class="page-link" href="#">...</a>`;
                        paginationList.appendChild(ellipsisItem);
                    }
                    
                    const lastItem = document.createElement('li');
                    lastItem.className = 'page-item';
                    lastItem.innerHTML = `<a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>`;
                    paginationList.appendChild(lastItem);
                }
                
                const nextItem = document.createElement('li');
                nextItem.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextItem.innerHTML = `
                    <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                `;
                paginationList.appendChild(nextItem);
            },
            
            async loadRecentOrders() {
                try {
                    const orders = await API.getRecentOrders(5);
                    this.renderRecentOrders(orders);
                } catch (error) {
                    console.error('Error loading recent orders:', error);
                    this.elements.recentOrdersContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-exclamation-circle text-warning"></i>
                            <h5>Couldn't load orders</h5>
                            <p>There was a problem loading recent orders. Please try again later.</p>
                            <button class="btn btn-sm btn-primary btn-retry" onclick="UI.loadRecentOrders()">
                                Retry
                            </button>
                        </div>
                    `;
                }
            },
            
            renderRecentOrders(orders) {
                if (!this.elements.recentOrdersContainer) return;
                
                this.elements.recentOrdersContainer.innerHTML = '';
                
                if (orders.length === 0) {
                    this.elements.recentOrdersContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-shopping-cart text-muted"></i>
                            <h5>No recent orders</h5>
                            <p>New orders will appear here as they come in.</p>
                        </div>
                    `;
                    return;
                }
                
                orders.forEach(order => {
                    let statusClass = 'bg-secondary';
                    let statusIcon = 'fas fa-clock';
                    
                    if (order.status === 'Delivered') {
                        statusClass = 'bg-success';
                        statusIcon = 'fas fa-check-circle';
                    } else if (order.status === 'Processing') {
                        statusClass = 'bg-primary';
                        statusIcon = 'fas fa-cog';
                    } else if (order.status === 'Shipped') {
                        statusClass = 'bg-info';
                        statusIcon = 'fas fa-truck';
                    } else if (order.status === 'Cancelled') {
                        statusClass = 'bg-danger';
                        statusIcon = 'fas fa-times-circle';
                    }
                    
                    const orderItem = document.createElement('div');
                    orderItem.className = 'recent-order-item';
                    
                    orderItem.innerHTML = `
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <div>
                                <h6 class="mb-0 fw-semibold">${order.id}</h6>
                                <small class="text-muted">${order.customer}</small>
                            </div>
                            <span class="badge ${statusClass}">
                                <i class="${statusIcon} me-1"></i> ${order.status}
                            </span>
                        </div>
                        <div class="d-flex justify-content-between">
                            <div>
                                <small class="text-muted">${order.date}</small>
                                <small class="text-muted ms-2">${order.items} item${order.items !== 1 ? 's' : ''}</small>
                            </div>
                            <div class="fw-semibold">₹${parseFloat(order.total).toFixed(2)}</div>
                        </div>
                    `;
                    
                    this.elements.recentOrdersContainer.appendChild(orderItem);
                });
            },
            
            async loadNotifications() {
                try {
                    this.elements.notificationsLoading.classList.remove('d-none');
                    this.elements.notificationsEmpty.classList.add('d-none');
                    
                    const notifications = await API.getNotifications();
                    this.renderNotifications(notifications);
                } catch (error) {
                    console.error('Error loading notifications:', error);
                    this.elements.notificationsLoading.classList.add('d-none');
                    this.elements.notificationsEmpty.classList.remove('d-none');
                }
            },
            
            renderNotifications(notifications) {
                if (!this.elements.notificationsMenu) return;
                
                this.elements.notificationsLoading.classList.add('d-none');
                
                const unreadCount = notifications.filter(n => !n.read).length;
                
                if (unreadCount > 0) {
                    this.elements.notificationCount.textContent = unreadCount;
                    this.elements.notificationCount.classList.remove('d-none');
                } else {
                    this.elements.notificationCount.classList.add('d-none');
                }
                
                const items = this.elements.notificationsMenu.querySelectorAll('li:not(:first-child):not(:last-child):not(:nth-last-child(2))');
                items.forEach(item => item.remove());
                
                if (notifications.length === 0) {
                    this.elements.notificationsEmpty.classList.remove('d-none');
                    return;
                }
                
                const headerItem = this.elements.notificationsMenu.querySelector('li:first-child');
                
                notifications.forEach(notification => {
                    let iconClass = 'bg-secondary';
                    let icon = 'fas fa-bell';
                    
                    if (notification.type === 'order') {
                        iconClass = 'bg-success';
                        icon = 'fas fa-shopping-cart';
                    } else if (notification.type === 'review') {
                        iconClass = 'bg-info';
                        icon = 'fas fa-comment';
                    } else if (notification.type === 'stock') {
                        iconClass = 'bg-warning';
                        icon = 'fas fa-exclamation-triangle';
                    } else if (notification.type === 'error') {
                        iconClass = 'bg-danger';
                        icon = 'fas fa-exclamation-circle';
                    }
                    
                    const notificationItem = document.createElement('li');
                    notificationItem.innerHTML = `
                        <a class="dropdown-item d-flex align-items-center py-2 ${notification.read ? 'text-muted' : 'fw-semibold'}" href="#" data-id="${notification.id}">
                            <div class="flex-shrink-0">
                                <i class="${icon} ${iconClass} text-white p-2 rounded"></i>
                            </div>
                            <div class="ms-3">
                                <p class="mb-0">${notification.title}</p>
                                <small class="text-muted">${notification.time}</small>
                            </div>
                            ${!notification.read ? '<div class="ms-auto"><span class="badge bg-primary rounded-pill">New</span></div>' : ''}
                        </a>
                    `;
                    
                    headerItem.after(notificationItem);
                });
            },
            
            fillProductForm(product, isEdit = false) {
                const prefix = isEdit ? 'edit' : '';
                
                document.getElementById(`${prefix}ProductTitle`).value = product.title || '';
                document.getElementById(`${prefix}ProductPrice`).value = product.price || '';
                
                if (isEdit) {
                    document.getElementById(`${prefix}ProductAuthor`).value = product.author || '';
                    document.getElementById(`${prefix}ProductISBN`).value = product.isbn || '';
                    document.getElementById(`${prefix}ProductYear`).value = product.year || '';
                    document.getElementById(`${prefix}ProductPublisher`).value = product.publisher || '';
                }
                
                document.getElementById(`${prefix}ProductDepartment`).value = product.department || '';
                document.getElementById(`${prefix}ProductFormat`).value = product.format || '';
                document.getElementById(`${prefix}ProductDescription`).value = product.description || '';
                document.getElementById(`${prefix}ProductStock`).value = product.stock || 0;
                
                if (isEdit) {
                    document.getElementById('editProductId').value = product.id;
                    
                    if (product.image) {
                        const previewElement = this.elements.editImagePreview;
                        const placeholderElement = this.elements.editImagePreviewPlaceholder;
                        const removeButton = this.elements.editImagePreviewRemove;
                        
                        previewElement.src = product.image;
                        previewElement.classList.add('show');
                        placeholderElement.style.display = 'none';
                        removeButton.style.display = 'flex';
                    }
                }
            },
            
            resetForm(formId) {
                document.getElementById(formId).reset();
                
                if (formId === 'addProductForm') {
                    this.clearImagePreview(
                        this.elements.productCover,
                        this.elements.addImagePreview,
                        this.elements.addImagePreviewPlaceholder
                    );
                }
            },
            
            getFormData(formId) {
                const form = document.getElementById(formId);
                const formData = new FormData(form);
                
                const data = {};
                for (const [key, value] of formData.entries()) {
                    if (key === 'cover') {
                        if (value.size > 0) {
                            data[key] = value;
                        }
                    } else {
                        data[key] = value;
                    }
                }
                
                return data;
            },
            
            displayProductDetails(product) {
                if (!this.elements.productDetailsModal) return;
                
                this.elements.detailsProductTitle.textContent = product.title || 'Untitled Product';
                this.elements.detailsProductAuthor.textContent = product.author ? `By ${product.author}` : 'Unknown Author';
                this.elements.detailsProductPrice.textContent = `₹${parseFloat(product.price).toFixed(2)}`;
                this.elements.detailsProductCover.src = product.image || '/placeholder.svg?height=300&width=300';
                
                const departmentSpan = this.elements.detailsProductDepartment.querySelector('span');
                departmentSpan.textContent = product.department || 'N/A';
                
                const formatSpan = this.elements.detailsProductFormat.querySelector('span');
                formatSpan.textContent = product.format || 'N/A';
                
                const yearSpan = this.elements.detailsProductYear.querySelector('span');
                yearSpan.textContent = product.year || 'N/A';
                
                const isbnSpan = this.elements.detailsProductISBN.querySelector('span');
                isbnSpan.textContent = product.isbn ? `ISBN: ${product.isbn}` : 'ISBN: N/A';
                
                if (product.stock > 0) {
                    this.elements.detailsProductStock.className = 'badge bg-success badge-status';
                    this.elements.detailsProductStock.textContent = `In Stock (${product.stock})`;
                } else {
                    this.elements.detailsProductStock.className = 'badge bg-danger badge-status';
                    this.elements.detailsProductStock.textContent = 'Out of Stock';
                }
                
                const publisherSpan = this.elements.detailsProductPublisher.querySelector('span');
                publisherSpan.textContent = product.publisher || 'Unknown Publisher';
                
                this.elements.detailsProductDescription.textContent = product.description || 'No description available.';
                
                this.elements.editProductDetailsBtn.dataset.id = product.id;
                
                const detailsModal = new bootstrap.Modal(this.elements.productDetailsModal);
                detailsModal.show();
            }
        };
        
        const ProductsController = {
            currentProducts: [],
            currentPage: 1,
            pageSize: 10,
            totalPages: 1,
            totalItems: 0,
            
            async init() {
                await this.loadProducts();
            },
            
            async loadProducts() {
                try {
                    const searchTerm = UI.elements.searchProducts?.value || '';
                    const department = UI.elements.departmentFilter?.value || '';
                    const format = UI.elements.formatFilter?.value || '';
                    
                    const params = {
                        search: searchTerm,
                        department: department,
                        format: format,
                        page: this.currentPage,
                        limit: this.pageSize
                    };
                    
                    const data = await API.getProducts(params);
                    this.currentProducts = data.products;
                    this.totalPages = data.totalPages;
                    this.totalItems = data.totalItems;
                    
                    const startItem = (this.currentPage - 1) * this.pageSize + 1;
                    const endItem = Math.min(startItem + this.pageSize - 1, this.totalItems);
                    
                    const pagination = {
                        currentPage: this.currentPage,
                        totalPages: this.totalPages,
                        totalItems: this.totalItems,
                        pageSize: this.pageSize,
                        startItem,
                        endItem
                    };
                    
                    UI.renderProducts(this.currentProducts, pagination);
                } catch (error) {
                    UI.showToast('Error', 'Failed to load products', 'error');
                    console.error('Error loading products:', error);
                }
            },
            
            async loadProductForEdit(productId) {
                try {
                    const product = await API.getProduct(productId);
                    UI.fillProductForm(product, true);
                } catch (error) {
                    UI.showToast('Error', 'Failed to load product details', 'error');
                    console.error('Error loading product for edit:', error);
                }
            },
            
            async loadProductDetails(productId) {
                try {
                    const product = await API.getProduct(productId);
                    UI.displayProductDetails(product);
                } catch (error) {
                    UI.showToast('Error', 'Failed to load product details', 'error');
                    console.error('Error loading product details:', error);
                }
            },
            
            async saveProduct() {
                try {
                    const productData = UI.getFormData('addProductForm');
                    
                    if (!productData.title || !productData.price) {
                        UI.showToast('Warning', 'Please fill in all required fields', 'warning');
                        return;
                    }
                    
                    await API.createProduct(productData);
                    
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addProductModal'));
                    modal.hide();
                    UI.resetForm('addProductForm');
                    
                    await this.loadProducts();
                    
                    UI.showToast('Success', 'Product added successfully');
                } catch (error) {
                    UI.showToast('Error', 'Failed to add product', 'error');
                    console.error('Error saving product:', error);
                }
            },
            
            async updateProduct() {
                try {
                    const productId = document.getElementById('editProductId').value;
                    const productData = UI.getFormData('editProductForm');
                    
                    if (!productData.title || !productData.price) {
                        UI.showToast('Warning', 'Please fill in all required fields', 'warning');
                        return;
                    }
                    
                    await API.updateProduct(productId, productData);
                    
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editProductModal'));
                    modal.hide();
                    
                    await this.loadProducts();
                    
                    UI.showToast('Success', 'Product updated successfully');
                } catch (error) {
                    UI.showToast('Error', 'Failed to update product', 'error');
                    console.error('Error updating product:', error);
                }
            },
            
            async deleteProduct() {
                try {
                    const productId = document.getElementById('deleteProductId').value;
                    await API.deleteProduct(productId);
                    
                    const modal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal'));
                    modal.hide();
                    
                    await this.loadProducts();
                    
                    UI.showToast('Success', 'Product deleted successfully');
                } catch (error) {
                    UI.showToast('Error', 'Failed to delete product', 'error');
                    console.error('Error deleting product:', error);
                }
            }
        };
        
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            UI.init();
            ProductsController.init();
        });
    </script>
</body>
</html>