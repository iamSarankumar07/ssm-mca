<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Students Fee Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        :root {
            --primary: #4f46e5;
            --primary-hover: #4338ca;
            --primary-light: rgba(79, 70, 229, 0.1);
            --secondary: #f9fafb;
            --danger: #ef4444;
            --danger-hover: #dc2626;
            --success: #10b981;
            --success-hover: #059669;
            --warning: #f59e0b;
            --dark: #111827;
            --gray: #6b7280;
            --light-gray: #e5e7eb;
            --white: #ffffff;
            --card-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --border-radius: 0.75rem;
        }
        
        html, body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f8;
            color: var(--dark);
            line-height: 1.6;
            height: 100%;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }
        
        .page-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            width: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            flex-shrink: 0;
            background-color: var(--white);
            border-bottom: 1px solid var(--light-gray);
        }
        
        .header h1 {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--dark);
            margin: 0;
        }
        
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            position: relative;
            padding: 0;
        }
        
        .card-header-content {
            display: flex;
            align-items: center;
        }
        
        .back-button {
            margin-right: 1rem;
            background-color: var(--white);
            border: 1px solid var(--light-gray);
            border-radius: 0.5rem;
            padding: 0.5rem 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
            color: var(--dark);
            text-decoration: none;
            transition: all 0.2s ease;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }
        
        .back-button:hover {
            background-color: var(--secondary);
            color: var(--primary);
        }
        
        .card {
            background-color: var(--white);
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--card-shadow);
            overflow: hidden;
            margin-bottom: 0;
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        
        .card:hover {
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.25rem;
            border-bottom: 1px solid var(--light-gray);
            background-color: var(--white);
            flex-shrink: 0;
        }
        
        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--dark);
            margin: 0;
        }
        
        .card-body {
            padding: 1.25rem;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            flex: 1;
        }
        
        .filters {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-shrink: 0;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .filter-item {
            flex: 1;
            min-width: 200px;
            max-width: 300px;
        }
        
        .data-container {
            flex: 1;
            overflow-y: auto;
            padding-right: 0.5rem;
            margin-top: 0.75rem;
        }
        
        .form-control, .form-select {
            padding: 0.6rem 0.75rem;
            border: 1px solid var(--light-gray);
            border-radius: 0.5rem;
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.15);
        }
        
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 500;
            transition: all 0.2s ease;
            font-size: 0.875rem;
        }
        
        .btn-primary {
            background-color: var(--primary);
            border-color: var(--primary);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
        }
        
        .btn-success {
            background-color: var(--success);
            border-color: var(--success);
        }
        
        .btn-success:hover {
            background-color: var(--success-hover);
            border-color: var(--success-hover);
        }
        
        .btn-danger {
            background-color: var(--danger);
            border-color: var(--danger);
        }
        
        .btn-danger:hover {
            background-color: var(--danger-hover);
            border-color: var(--danger-hover);
        }
        
        .btn-sm {
            padding: 0.35rem 0.7rem;
            font-size: 0.8rem;
        }
        
        .badge {
            padding: 0.35em 0.65em;
            font-size: 0.75em;
            font-weight: 600;
            border-radius: 0.375rem;
        }
        
        .badge-male {
            background-color: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }
        
        .badge-female {
            background-color: rgba(236, 72, 153, 0.1);
            color: #ec4899;
        }
        
        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 3rem;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(99, 102, 241, 0.1);
            border-radius: 50%;
            border-top-color: var(--primary);
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem 1rem;
            text-align: center;
        }
        
        .empty-state-icon {
            font-size: 3rem;
            color: var(--light-gray);
            margin-bottom: 1rem;
        }
        
        .empty-state-text {
            color: var(--gray);
            font-size: 1rem;
            max-width: 300px;
            margin: 0 auto;
        }
        
        .modal-content {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--card-shadow);
        }
        
        .modal-header {
            background-color: var(--primary);
            color: white;
            padding: 1rem 1.25rem;
            border-bottom: none;
        }
        
        .modal-title {
            font-weight: 600;
            font-size: 1rem;
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .modal-body {
            padding: 1.25rem;
        }
        
        .modal-footer {
            border-top: 1px solid var(--light-gray);
            padding: 1rem 1.25rem;
        }
        
        /* Custom modal size */
        .modal-compact .modal-dialog {
            max-width: 360px;
            margin: 1.75rem auto;
        }
        
        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
            color: var(--dark);
        }
        
        .form-text {
            font-size: 0.85rem;
            color: var(--gray);
        }
        
        .table-view .table {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
            margin-bottom: 0;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        
        /* Modern table header styling */
        .table-view .table th {
            background: linear-gradient(to right, var(--primary), var(--primary-hover));
            padding: 0.75rem 1rem;
            font-weight: 600;
            color: white;
            border: none;
            white-space: nowrap;
            text-transform: uppercase;
            font-size: 0.7rem;
            letter-spacing: 0.05em;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .table-view .table th::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to right, rgba(255, 255, 255, 0.1), transparent);
            transform: translateX(-100%);
            transition: transform 0.5s ease;
        }
        
        .table-view .table th:hover::after {
            transform: translateX(100%);
        }
        
        .table-view .table th:first-child {
            border-top-left-radius: var(--border-radius);
        }
        
        .table-view .table th:last-child {
            border-top-right-radius: var(--border-radius);
        }
        
        .table-view .table td {
            padding: 0.75rem 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--light-gray);
            color: var(--dark);
            font-size: 0.875rem;
            background-color: var(--white);
        }
        
        .table-view .table tr:last-child td {
            border-bottom: none;
        }
        
        .table-view .table tr:last-child td:first-child {
            border-bottom-left-radius: var(--border-radius);
        }
        
        .table-view .table tr:last-child td:last-child {
            border-bottom-right-radius: var(--border-radius);
        }
        
        .table-view .table tr:hover td {
            background-color: var(--primary-light);
        }
        
        .view-toggle {
            display: flex;
            gap: 0.5rem;
            margin-left: 1rem;
        }
        
        .view-toggle-btn {
            padding: 0.4rem 0.6rem;
            border-radius: 0.375rem;
            background-color: var(--secondary);
            border: 1px solid var(--light-gray);
            color: var(--gray);
            font-size: 0.85rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .view-toggle-btn:hover {
            background-color: rgba(99, 102, 241, 0.1);
            color: var(--primary);
        }
        
        .view-toggle-btn.active {
            background-color: var(--primary);
            color: var(--white);
            border-color: var(--primary);
        }
        
        .actions-cell {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        
        .action-btn {
            width: 32px;
            height: 32px;
            border-radius: 6px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            transition: all 0.2s ease;
            border: none;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.1);
            transform: translateY(100%);
            transition: transform 0.2s ease;
        }
        
        .action-btn:hover::before {
            transform: translateY(0);
        }
        
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }
        
        .action-btn:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .view-btn {
            background-color: var(--primary);
        }
        
        .edit-btn {
            background-color: var(--warning);
        }
        
        .delete-btn {
            background-color: var(--danger);
        }
        
        .fee-card {
            border-radius: var(--border-radius);
            border: 1px solid var(--light-gray);
            padding: 1.25rem;
            margin-bottom: 1rem;
            transition: all 0.2s ease;
            background-color: var(--white);
        }
        
        .fee-card:hover {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            transform: translateY(-2px);
        }
        
        .fee-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .fee-title {
            font-weight: 600;
            font-size: 1.1rem;
            color: var(--dark);
        }
        
        .fee-details {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .fee-detail {
            display: flex;
            flex-direction: column;
        }
        
        .detail-label {
            font-size: 0.8rem;
            color: var(--gray);
            margin-bottom: 0.25rem;
        }
        
        .detail-value {
            font-size: 0.95rem;
            font-weight: 500;
            color: var(--dark);
        }
        
        .fee-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
        }
        
        .avatar {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            overflow: hidden;
            background-color: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.75rem;
            color: var(--white);
            font-weight: 600;
            font-size: 1rem;
        }
        
        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .student-info {
            display: flex;
            align-items: center;
        }
        
        .student-info-details {
            display: flex;
            flex-direction: column;
        }
        
        .student-name {
            font-weight: 600;
            font-size: 1rem;
            color: var(--dark);
        }
        
        .student-position {
            font-size: 0.85rem;
            color: var(--gray);
        }
        
        .status-badge {
            padding: 0.35em 0.65em;
            font-size: 0.75em;
            font-weight: 600;
            border-radius: 0.375rem;
            display: inline-block;
            text-align: center;
            min-width: 70px;
        }
        
        .status-paid {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--success);
        }
        
        .status-partial {
            background-color: rgba(245, 158, 11, 0.1);
            color: var(--warning);
        }
        
        .status-unpaid {
            background-color: rgba(239, 68, 68, 0.1);
            color: var(--danger);
        }
        
        .skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: skeleton-loading 1.5s infinite;
            border-radius: 4px;
        }
        
        .skeleton-card {
            border-radius: var(--border-radius);
            border: 1px solid var(--light-gray);
            padding: 1.25rem;
            margin-bottom: 1rem;
            background-color: var(--white);
        }
        
        .skeleton-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .skeleton-avatar {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
        }
        
        .skeleton-text {
            height: 1rem;
            margin-bottom: 0.5rem;
        }
        
        .skeleton-text.sm {
            width: 30%;
            height: 0.8rem;
        }
        
        .skeleton-text.md {
            width: 50%;
        }
        
        .skeleton-text.lg {
            width: 80%;
        }
        
        .skeleton-badge {
            width: 4rem;
            height: 1.5rem;
            border-radius: 0.375rem;
        }
        
        .skeleton-details {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .skeleton-detail {
            display: flex;
            flex-direction: column;
        }
        
        .skeleton-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
        }
        
        .skeleton-button {
            width: 6rem;
            height: 2rem;
            border-radius: var(--border-radius);
        }
        
        @keyframes skeleton-loading {
            0% {
                background-position: 200% 0;
            }
            100% {
                background-position: -200% 0;
            }
        }
        
        #skeletonLoading {
            display: none;
        }
        
        #cardViewSkeleton, #tableViewSkeleton {
            display: none;
        }
        
        .toastify {
            font-family: 'Inter', sans-serif;
            border-radius: 0.5rem;
            font-weight: 500;
            padding: 1rem 1.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        
        .toastify-success {
            background: linear-gradient(135deg, var(--success) 0%, var(--success-hover) 100%);
        }
        
        .toastify-error {
            background: linear-gradient(135deg, var(--danger) 0%, var(--danger-hover) 100%);
        }
        
        .toastify-info {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%);
        }
        
        .header-actions {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .search-container {
            position: relative;
            width: 100%;
            max-width: 250px;
        }
        
        .search-input {
            width: 100%;
            padding: 0.5rem 0.75rem 0.5rem 2.25rem;
            border: 1px solid var(--light-gray);
            border-radius: 0.5rem;
            font-size: 0.875rem;
            transition: all 0.2s ease;
            background-color: white;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        }
        
        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
        }
        
        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
            font-size: 0.875rem;
        }
        
        .compact-stats {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .stat-pill {
            display: flex;
            align-items: center;
            background-color: white;
            border-radius: 50px;
            padding: 0.3rem 0.6rem;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .stat-pill i {
            margin-right: 0.3rem;
            font-size: 0.7rem;
        }
        
        .stat-pill.total {
            color: var(--primary);
            background-color: var(--primary-light);
        }
        
        .stat-pill.paid {
            color: var(--success);
            background-color: rgba(16, 185, 129, 0.1);
        }
        
        .stat-pill.pending {
            color: var(--danger);
            background-color: rgba(239, 68, 68, 0.1);
        }
        
        .filter-row {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 0.75rem;
            flex-wrap: wrap;
            background-color: var(--white);
            padding: 0.75rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .filter-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .filter-label {
            font-weight: 500;
            font-size: 0.8rem;
            color: var(--gray);
            white-space: nowrap;
        }
        
        .filter-select {
            min-width: 120px;
            padding: 0.4rem 0.6rem;
            font-size: 0.8rem;
        }
        
        .student-info-card {
            border-left: 4px solid var(--primary);
            background-color: rgba(79, 70, 229, 0.05) !important;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .alert-checkbox-container {
            background-color: rgba(79, 70, 229, 0.05);
            border-radius: 0.5rem;
            padding: 0.75rem;
            margin-top: 0.75rem;
            border: 1px dashed rgba(79, 70, 229, 0.3);
        }
        
        @media (max-width: 768px) {
            .card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
                padding: 0.75rem 1rem;
            }
            
            .header-actions {
                width: 100%;
                flex-wrap: wrap;
            }
            
            .view-toggle {
                margin-left: 0;
                margin-top: 0.5rem;
            }
            
            .filters {
                max-height: none;
                overflow: visible;
            }
            
            .filter-item {
                max-width: 100%;
            }
            
            .fee-details {
                grid-template-columns: 1fr;
            }
            
            .fee-actions {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .fee-actions .btn {
                width: 100%;
            }
            
            .search-container {
                max-width: 100%;
            }
            
            .data-container {
                padding-right: 0;
            }
            
            .filter-row {
                flex-direction: column;
                align-items: stretch;
                padding: 0.5rem;
                gap: 0.5rem;
            }
            
            .filter-group {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.25rem;
            }
            
            .compact-stats {
                justify-content: center;
                width: 100%;
                margin-top: 0.5rem;
            }
        }
        
        @media (max-width: 992px) {
            .table-responsive {
                overflow-x: auto;
            }
            
            .filter-row {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <div class="page-container">
        <div class="main-content">
            <div class="card">
                <div class="card-header">
                    <div class="card-header-content">
                        <a href="/v1/api/dashboard#fees" class="back-button">
                            <i class="fas fa-arrow-left"></i> Back
                        </a>
                        <h2 class="card-title">{{course}} - {{year}} Tuition Fees Details</h2>
                    </div>
                    <div class="header-actions">
                        <div class="view-toggle">
                            <button class="view-toggle-btn active" data-view="card">
                                <i class="fas fa-th-large me-1"></i> Card
                            </button>
                            <button class="view-toggle-btn" data-view="table">
                                <i class="fas fa-table me-1"></i> Table
                            </button>
                        </div>
                        <form id="downloadForm" action="/v1/api/studentTuitionDownload" method="post">
                            <input type="hidden" name="year" id="yearInput" value="">
                            <input type="hidden" name="course" id="courseInput" value="">
                            <input type="hidden" name="isPdf" value="true">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-download"></i> Download Report
                            </button>
                        </form>
                    </div>
                </div>
                <div class="card-body">
                    <div class="filter-row">
                        <div class="search-container">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" id="searchInput" class="search-input" placeholder="Search by student name, ID or email...">
                        </div>
                        
                        <div class="compact-stats">
                            <div class="stat-pill total">
                                <i class="fas fa-money-bill-wave"></i>
                                <span>Total: <span id="totalAmount">₹ 0</span></span>
                            </div>
                            <div class="stat-pill paid">
                                <i class="fas fa-check-circle"></i>
                                <span>Paid: <span id="paidAmount">₹ 0</span></span>
                            </div>
                            <div class="stat-pill pending">
                                <i class="fas fa-exclamation-circle"></i>
                                <span>Pending: <span id="pendingAmount">₹ 0</span></span>
                            </div>
                        </div>
                    </div>

                    <div class="data-container">
                        <div id="loadingSpinner" class="loading-spinner">
                            <div class="spinner"></div>
                        </div>

                        <div id="skeletonLoading">
                            <div id="cardViewSkeleton" class="card-view">
                            </div>

                            <div id="tableViewSkeleton" class="table-view" style="display: none;">
                                <div class="table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>#</th>
                                                <th>Student</th>
                                                <th>Student ID</th>
                                                <th>Gender</th>
                                                <th>Semester</th>
                                                <th>Total Fee</th>
                                                <th>Paid Fee</th>
                                                <th>Pending Fee</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="tableBodySkeleton">
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div id="emptyState" class="empty-state" style="display: none;">
                            <div class="empty-state-icon">
                                <i class="fas fa-money-bill-slash"></i>
                            </div>
                            <div class="empty-state-text">
                                No fee records found matching your filters.
                            </div>
                        </div>

                        <div id="cardView" class="card-view" style="display: none;">
                        </div>

                        <div id="tableView" class="table-view" style="display: none;">
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>#</th>
                                            <th>Student</th>
                                            <th>Student ID</th>
                                            <th>Gender</th>
                                            <th>Semester</th>
                                            <th>Total Fee</th>
                                            <th>Paid Fee</th>
                                            <th>Pending Fee</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="tableBody">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="modalsContainer"></div>
    </div>

    <!-- Smaller Edit Modal -->
    <div class="modal fade modal-compact" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">
                        <i class="fas fa-pencil-alt me-2"></i>Update Fee
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editFeeForm">
                        <input type="hidden" id="studentId" name="studentId">
                    
                        <div class="student-info-card">
                            <div class="d-flex align-items-center mb-1">
                                <i class="fas fa-user text-primary me-2"></i>
                                <span class="fw-bold" id="studentName"></span>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-id-card text-primary me-2"></i>
                                <span id="studentIdNumber"></span>
                            </div>
                        </div>
                    
                        <div class="mb-2">
                            <label for="totalFee" class="form-label">Total Fee (₹)</label>
                            <div class="input-group">
                                <span class="input-group-text">₹</span>
                                <input type="number" class="form-control" id="totalFee" name="totalFee">
                            </div>
                        </div>
                    
                        <div class="mb-2">
                            <label for="paidFee" class="form-label">Paid Fee (₹)</label>
                            <div class="input-group">
                                <span class="input-group-text">₹</span>
                                <input type="number" class="form-control" id="paidFee" name="paidFee">
                            </div>
                        </div>
                    
                        <div class="mb-2">
                            <label for="pendingFee" class="form-label">Pending Fee (₹)</label>
                            <div class="input-group">
                                <span class="input-group-text">₹</span>
                                <input type="number" class="form-control bg-light" id="pendingFee" readonly>
                            </div>
                        </div>

                        <div class="mb-2">
                            <label for="semester" class="form-label">Semester</label>
                            <input type="text" class="form-control" id="semester" name="semester">
                        </div>
                        
                        <div class="alert-checkbox-container">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="alertStudent" name="alertStudent">
                                <label class="form-check-label" for="alertStudent">
                                    <i class="fas fa-bell text-warning me-1"></i> Alert Student
                                </label>
                            </div>
                            <small class="text-muted d-block mt-1">
                                <i class="fas fa-info-circle me-1"></i> Student will be notified
                            </small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary btn-sm" id="saveChanges">
                        <span id="saveSpinner" class="spinner-border spinner-border-sm d-none me-1" role="status" aria-hidden="true"></span>
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
        let students = [];
        let filteredStudents = [];
        let currentView = 'card';
        let isLoading = false;
        
        const loadingSpinner = document.getElementById('loadingSpinner');
        const skeletonLoading = document.getElementById('skeletonLoading');
        const cardViewSkeleton = document.getElementById('cardViewSkeleton');
        const tableViewSkeleton = document.getElementById('tableViewSkeleton');
        const tableBodySkeleton = document.getElementById('tableBodySkeleton');
        const emptyState = document.getElementById('emptyState');
        const cardView = document.getElementById('cardView');
        const tableView = document.getElementById('tableView');
        const tableBody = document.getElementById('tableBody');
        const searchInput = document.getElementById('searchInput');
        const viewToggleBtns = document.querySelectorAll('.view-toggle-btn');
        
        function showToast(message, type = 'info') {
            const toastClass = type === 'success' ? 'toastify-success' : 
                              type === 'error' ? 'toastify-error' : 'toastify-info';
            
            Toastify({
                text: message,
                duration: 3000,
                close: true,
                gravity: "top",
                position: "right",
                className: `toastify ${toastClass}`,
                stopOnFocus: true,
            }).showToast();
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            generateSkeletons();
            
            fetchFeeData();
            
            searchInput.addEventListener('input', filterStudents);
            
            viewToggleBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const view = this.getAttribute('data-view');
                    setActiveView(view);
                });
            });
            
            document.getElementById('totalFee').addEventListener('input', updatePendingFee);
            document.getElementById('paidFee').addEventListener('input', updatePendingFee);
            
            document.getElementById('saveChanges').addEventListener('click', saveChanges);
            
            // Set form values for download
            const year = getUrlParameter('year');
            const course = getUrlParameter('course');
            document.getElementById('yearInput').value = year;
            document.getElementById('courseInput').value = course;
        });
        
        function generateSkeletons() {
            cardViewSkeleton.innerHTML = '';
            for (let i = 0; i < 5; i++) {
                const skeletonCard = document.createElement('div');
                skeletonCard.className = 'skeleton-card';
                skeletonCard.innerHTML = `
                    <div class="skeleton-header">
                        <div class="d-flex align-items-center">
                            <div class="skeleton skeleton-avatar me-3"></div>
                            <div>
                                <div class="skeleton skeleton-text md mb-1"></div>
                                <div class="skeleton skeleton-text sm"></div>
                            </div>
                        </div>
                        <div class="skeleton skeleton-badge"></div>
                    </div>
                    <div class="skeleton-details">
                        <div class="skeleton-detail">
                            <div class="skeleton skeleton-text sm mb-1"></div>
                            <div class="skeleton skeleton-text md"></div>
                        </div>
                        <div class="skeleton-detail">
                            <div class="skeleton skeleton-text sm mb-1"></div>
                            <div class="skeleton skeleton-text md"></div>
                        </div>
                        <div class="skeleton-detail">
                            <div class="skeleton skeleton-text sm mb-1"></div>
                            <div class="skeleton skeleton-text md"></div>
                        </div>
                        <div class="skeleton-detail">
                            <div class="skeleton skeleton-text sm mb-1"></div>
                            <div class="skeleton skeleton-text md"></div>
                        </div>
                    </div>
                    <div class="skeleton-actions">
                        <div class="skeleton skeleton-button"></div>
                    </div>
                `;
                cardViewSkeleton.appendChild(skeletonCard);
            }
            
            tableBodySkeleton.innerHTML = '';
            for (let i = 0; i < 5; i++) {
                const skeletonRow = document.createElement('tr');
                skeletonRow.innerHTML = `
                    <td>
                        <div class="skeleton skeleton-text sm"></div>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="skeleton skeleton-avatar me-3"></div>
                            <div>
                                <div class="skeleton skeleton-text md mb-1"></div>
                                <div class="skeleton skeleton-text sm"></div>
                            </div>
                        </div>
                    </td>
                    <td><div class="skeleton skeleton-text md"></div></td>
                    <td><div class="skeleton skeleton-badge"></div></td>
                    <td><div class="skeleton skeleton-text md"></div></td>
                    <td><div class="skeleton skeleton-text md"></div></td>
                    <td><div class="skeleton skeleton-text md"></div></td>
                    <td><div class="skeleton skeleton-text md"></div></td>
                    <td><div class="skeleton skeleton-badge"></div></td>
                    <td>
                        <div class="d-flex gap-1 justify-content-center">
                            <div class="skeleton skeleton-circle"></div>
                        </div>
                    </td>
                `;
                tableBodySkeleton.appendChild(skeletonRow);
            }
        }
        
        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            var results = regex.exec(location.search);
            return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        }
        
        async function fetchFeeData() {
            showLoading();
            
            loadingSpinner.style.display = 'none';
            skeletonLoading.style.display = 'block';
            
            if (currentView === 'card') {
                cardViewSkeleton.style.display = 'block';
                tableViewSkeleton.style.display = 'none';
            } else {
                cardViewSkeleton.style.display = 'none';
                tableViewSkeleton.style.display = 'block';
            }
            
            try {
                const year = getUrlParameter('year');
                const course = getUrlParameter('course');
                
                const response = await fetch(`/v1/api/students/fees/data?year=${year}&course=${course}&type=Tuition`);
                
                if (!response.ok) {
                    throw new Error('Failed to fetch fee data');
                }
                
                const data = await response.json();
                
                document.getElementById('totalAmount').textContent = `₹ ${data.totalFees || '0'}`;
                document.getElementById('paidAmount').textContent = `₹ ${data.paidFees || '0'}`;
                document.getElementById('pendingAmount').textContent = `₹ ${data.pendingFees || '0'}`;
                
                if (data.studentsData && data.studentsData.length > 0) {
                    students = data.studentsData;
                    filterStudents();
                    showToast('Fee data loaded successfully', 'success');
                } else {
                    showEmpty();
                    showToast('No fee records found', 'info');
                }
            } catch (error) {
                console.error('Error fetching fee data:', error);
                showEmpty();
                showToast('Failed to load fee data. Please try again.', 'error');
            } finally {
                skeletonLoading.style.display = 'none';
            }
        }
        
        function filterStudents() {
            const search = searchInput.value.toLowerCase();
            
            filteredStudents = students.filter(student => {
                const matchesSearch = search === '' || 
                    student.name.toLowerCase().includes(search) || 
                    student.studentId.toLowerCase().includes(search) ||
                    (student.email && student.email.toLowerCase().includes(search));
                
                return matchesSearch;
            });
            
            renderStudents();
        }
        
        function renderStudents() {
            if (filteredStudents.length === 0) {
                showEmpty();
                return;
            }
            
            hideLoading();
            emptyState.style.display = 'none';
            
            if (currentView === 'card') {
                renderCardView();
                cardView.style.display = 'block';
                tableView.style.display = 'none';
            } else {
                renderTableView();
                cardView.style.display = 'none';
                tableView.style.display = 'block';
            }
        }
        
        function renderCardView() {
            cardView.innerHTML = '';
            
            filteredStudents.forEach((student, index) => {
                const card = document.createElement('div');
                card.className = 'fee-card';
                
                const initials = getInitials(student.name);
                
                let statusClass = 'status-unpaid';
                let statusText = 'Unpaid';
                
                if (student.tuitionFees && student.tuitionFees.status) {
                    statusText = student.tuitionFees.status;
                    if (statusText === 'Paid') {
                        statusClass = 'status-paid';
                    } else if (statusText === 'Partial') {
                        statusClass = 'status-partial';
                    }
                }
                
                card.innerHTML = `
                    <div class="fee-header">
                        <div class="student-info">
                            <div class="avatar">
                                ${student.imageUrl ? 
                                    `<img src="${student.imageUrl}" alt="${student.name}">` : 
                                    initials}
                            </div>
                            <div class="student-info-details">
                                <div class="student-name">${student.name}</div>
                                <div class="student-position">${student.studentId}</div>
                            </div>
                        </div>
                        <span class="badge ${student.gender === 'Male' ? 'badge-male' : 'badge-female'}">${student.gender}</span>
                    </div>
                    <div class="fee-details">
                        <div class="fee-detail">
                            <span class="detail-label">Semester</span>
                            <span class="detail-value">${student.tuitionFees?.semester || '-'}</span>
                        </div>
                        <div class="fee-detail">
                            <span class="detail-label">Total Fee</span>
                            <span class="detail-value">₹ ${student.tuitionFees?.totalFee || '0'}</span>
                        </div>
                        <div class="fee-detail">
                            <span class="detail-label">Paid Fee</span>
                            <span class="detail-value">₹ ${student.tuitionFees?.paidFee || '0'}</span>
                        </div>
                        <div class="fee-detail">
                            <span class="detail-label">Pending Fee</span>
                            <span class="detail-value">₹ ${student.tuitionFees?.pendingFee || '0'}</span>
                        </div>
                        <div class="fee-detail">
                            <span class="detail-label">Status</span>
                            <span class="status-badge ${statusClass}">${statusText}</span>
                        </div>
                    </div>
                    <div class="fee-actions">
                        <button class="btn btn-sm btn-warning edit-fee-btn" data-id="${student._id}" data-name="${student.name}" 
                            data-student-id="${student.studentId}" data-gender="${student.gender}" data-total-fee="${student.tuitionFees?.totalFee || '0'}" 
                            data-semester="${student.tuitionFees?.semester || ''}" data-paid-fee="${student.tuitionFees?.paidFee || '0'}" 
                            data-pending-fee="${student.tuitionFees?.pendingFee || '0'}" data-status="${student.tuitionFees?.status || 'Unpaid'}"
                            data-alert-student="${student.tuitionFees?.alertStudent || false}">
                            <i class="fas fa-edit me-1"></i> Edit Fee Details
                        </button>
                    </div>
                `;
                
                cardView.appendChild(card);
            });
            
            setupEditButtons();
        }
        
        function renderTableView() {
            tableBody.innerHTML = '';
            
            filteredStudents.forEach((student, index) => {
                const row = document.createElement('tr');
                
                const initials = getInitials(student.name);
                
                let statusClass = 'status-unpaid';
                let statusText = 'Unpaid';
                
                if (student.tuitionFees && student.tuitionFees.status) {
                    statusText = student.tuitionFees.status;
                    if (statusText === 'Paid') {
                        statusClass = 'status-paid';
                    } else if (statusText === 'Partial') {
                        statusClass = 'status-partial';
                    }
                }
                
                row.innerHTML = `
                    <td class="text-center">${index + 1}</td>
                    <td>
                        <div class="student-info">
                            <div class="avatar">
                                ${student.imageUrl ? 
                                    `<img src="${student.imageUrl}" alt="${student.name}">` : 
                                    initials}
                            </div>
                            <div class="student-info-details">
                                <div class="student-name">${student.name}</div>
                                <div class="student-position">${student.course} - ${student.year} Year</div>
                            </div>
                        </div>
                    </td>
                    <td class="text-center">${student.studentId}</td>
                    <td class="text-center"><span class="badge ${student.gender === 'Male' ? 'badge-male' : 'badge-female'}">${student.gender}</span></td>
                    <td class="text-center">${student.tuitionFees?.semester || '-'}</td>
                    <td class="text-center">₹ ${student.tuitionFees?.totalFee || '0'}</td>
                    <td class="text-center">₹ ${student.tuitionFees?.paidFee || '0'}</td>
                    <td class="text-center">₹ ${student.tuitionFees?.pendingFee || '0'}</td>
                    <td class="text-center"><span class="status-badge ${statusClass}">${statusText}</span></td>
                    <td class="text-center">
                        <button class="action-btn edit-btn edit-fee-btn" title="Edit Fee Details" data-id="${student._id}" data-name="${student.name}" 
                            data-student-id="${student.studentId}" data-gender="${student.gender}" data-total-fee="${student.tuitionFees?.totalFee || '0'}" 
                            data-semester="${student.tuitionFees?.semester || ''}" data-paid-fee="${student.tuitionFees?.paidFee || '0'}" 
                            data-pending-fee="${student.tuitionFees?.pendingFee || '0'}" data-status="${student.tuitionFees?.status || 'Unpaid'}"
                            data-alert-student="${student.tuitionFees?.alertStudent || false}">
                            <i class="fas fa-edit"></i>
                        </button>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
            
            setupEditButtons();
        }
        
        function setupEditButtons() {
            const editButtons = document.querySelectorAll('.edit-fee-btn');
            const editModal = new bootstrap.Modal(document.getElementById('editModal'));
            
            editButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const studentId = this.getAttribute('data-id');
                    const name = this.getAttribute('data-name');
                    const studentIdNumber = this.getAttribute('data-student-id');
                    const totalFee = this.getAttribute('data-total-fee');
                    const paidFee = this.getAttribute('data-paid-fee');
                    const pendingFee = this.getAttribute('data-pending-fee');
                    const semester = this.getAttribute('data-semester');
                    const alertStudent = this.getAttribute('data-alert-student');
                    
                    document.getElementById('studentId').value = studentId;
                    document.getElementById('studentName').textContent = name;
                    document.getElementById('studentIdNumber').textContent = studentIdNumber;
                    document.getElementById('totalFee').value = totalFee;
                    document.getElementById('paidFee').value = paidFee;
                    document.getElementById('pendingFee').value = pendingFee;
                    document.getElementById('semester').value = semester;
                    
                    document.getElementById('alertStudent').checked = alertStudent === 'true';
                    
                    editModal.show();
                });
            });
        }
        
        function updatePendingFee() {
            const totalFee = parseFloat(document.getElementById('totalFee').value) || 0;
            const paidFee = parseFloat(document.getElementById('paidFee').value) || 0;
            const pendingFee = totalFee - paidFee;
            
            document.getElementById('pendingFee').value = pendingFee > 0 ? pendingFee : 0;
        }
        
        function saveChanges() {
            const spinner = document.getElementById('saveSpinner');
            spinner.classList.remove('d-none');
            
            const studentId = document.getElementById('studentId').value;
            const totalFee = document.getElementById('totalFee').value;
            const paidFee = document.getElementById('paidFee').value;
            const semester = document.getElementById('semester').value;
            const alertStudent = document.getElementById('alertStudent').checked;
            
            if (!totalFee || !paidFee) {
                showToast('Please fill in all required fields', 'error');
                spinner.classList.add('d-none');
                return;
            }
            
            const data = {
                totalFee: totalFee,
                paidFee: paidFee,
                semester: semester,
                alertStudent: alertStudent,
                paymentType: "Tuition"
            };
            
            fetch(`/v1/api/updateFee/${studentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                spinner.classList.add('d-none');
                
                bootstrap.Modal.getInstance(document.getElementById('editModal')).hide();
                
                showToast('Student fee details updated successfully!', 'success');
                
                fetchFeeData();
            })
            .catch(error => {
                spinner.classList.add('d-none');
                
                console.error('Error updating student fee details:', error);
                showToast('Error updating student fee details. Please try again.', 'error');
            });
        }
        
        function getInitials(name) {
            if (!name) return '';
            
            return name
                .split(' ')
                .map(word => word.charAt(0))
                .join('')
                .toUpperCase()
                .substring(0, 2);
        }
        
        function setActiveView(view) {
            currentView = view;
            
            viewToggleBtns.forEach(btn => {
                if (btn.getAttribute('data-view') === view) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });
            
            if (isLoading) {
                if (view === 'card') {
                    cardViewSkeleton.style.display = 'block';
                    tableViewSkeleton.style.display = 'none';
                } else {
                    cardViewSkeleton.style.display = 'none';
                    tableViewSkeleton.style.display = 'block';
                }
            } else {
                renderStudents();
            }
        }
        
        function showLoading() {
            isLoading = true;
            loadingSpinner.style.display = 'flex';
            cardView.style.display = 'none';
            tableView.style.display = 'none';
            emptyState.style.display = 'none';
        }
        
        function hideLoading() {
            isLoading = false;
            loadingSpinner.style.display = 'none';
        }
        
        function showEmpty() {
            hideLoading();
            cardView.style.display = 'none';
            tableView.style.display = 'none';
            emptyState.style.display = 'flex';
        }
    </script>
</body>
</html>