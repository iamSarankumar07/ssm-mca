<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCA Chatroom</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap");

        body {
            font-family: "Inter", Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #eef1f7;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .chat-container {
            width: 90%;
            max-width: 700px;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 80vh;
        }

        .chat-header {
            background: linear-gradient(135deg, #3d6ef5ff, rgb(36, 79, 200));
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 20px;
            font-weight: 600;
            position: relative;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            scrollbar-width: thin;
            scrollbar-color: #ccc #f4f4f9;
        }

        .message {
            margin: 6px 0;
            padding: 12px;
            border-radius: 8px;
            max-width: 70%;
            word-wrap: break-word;
            display: flex;
            flex-direction: column;
            font-size: 14px;
        }

        .message.own {
            background-color: #3d6ef5ff;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 2px;
        }

        .message.other {
            background-color: #f1f5f9;
            color: #333;
            align-self: flex-start;
            border-bottom-left-radius: 2px;
        }

        .timestamp {
            font-size: 11px;
            opacity: 0.6;
            text-align: right;
            margin-top: 5px;
        }

        .input-container {
            padding: 12px;
            background: #f9fafc;
            display: flex;
            gap: 10px;
            border-top: 1px solid #ddd;
        }

        #messageInput {
            flex-grow: 1;
            padding: 10px 14px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 14px;
            outline: none;
            transition: border 0.2s ease-in-out;
        }

        #messageInput:focus {
            border-color: #3d6ef5ff;
        }

        button {
            padding: 10px 16px;
            background: #3d6ef5ff;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background 0.2s;
        }

        button:hover {
            background: rgb(37, 81, 203);
        }

        .system-message {
            text-align: center;
            color: #777;
            font-style: italic;
            padding: 8px 12px;
            background-color: #f0f0f0;
            border-radius: 6px;
            display: inline-block;
            font-size: 13px;
            max-width: 80%;
            align-self: center;
            margin: 2px auto;
        }

        .typing-indicator {
            font-size: 12px;
            color: #555;
            margin-left: 10px;
        }

        .back-button {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            outline: none;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 48px;
            height: 48px;
            border-radius: 50%;
            transition: background 0.3s ease, transform 0.2s ease;
        }

        .back-button:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        #sendButton {
            padding: 10px;
            background: #3d6ef5ff;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            transition: background 0.2s;
        }

        #sendButton:hover {
            background: rgb(37, 81, 203);
        }

        #sendButton img,
        #sendButton svg {
            width: 22px;
            height: 22px;
        }

        @media (max-width: 480px) {

            html,
            body {
                height: 100%;
                overflow: hidden;
            }

            .chat-container {
                width: 100%;
                max-width: 850px;
                background: #ffffff;
                border-radius: 12px;
                box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.1);
                height: 100%;
            }
        }
    </style>
    <script>
        const isAdmin = {{ isAdmin }};
    </script>
</head>

<body>
    <div class="chat-container">
        <div class="chat-header">
            <button class="back-button" onclick="goBack()">
                <i class="fa-solid fa-arrow-left"></i>
            </button>
            MCA Chatroom
            <span class="typing-indicator" id="typingIndicator"></span>
        </div>
        <div class="messages" id="messages">
            <div id="typingIndicator" class="system-message" style="display: none;"></div>
        </div>
        {{!-- <div class="input-container">
            <input type="text" id="messageInput" placeholder="Type a message..." autocomplete="off">
            <button onclick="sendMessage()">Send</button>
        </div> --}}
        <div class="input-container">
            <input type="text" id="messageInput" placeholder="Type a message..." autocomplete="off">
            <button id="sendButton" onclick="sendMessage()">
                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="white">
                    <path d="M2 21l21-9-21-9v7l15 2-15 2z" />
                </svg>
            </button>
        </div>
    </div>
    <script>
        function goBack() {
            window.history.back();
        }

        function deleteMessage(messageId) {
            if (confirm("Are you sure you want to delete this message?")) {
                fetch(`/ssm/mca/delete-message/${messageId}`, { method: "DELETE" })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            document.querySelector(`[data-id='${messageId}']`).remove();
                        } else {
                            alert("Failed to delete message.");
                        }
                    })
                    .catch((error) => console.error("Error deleting message:", error));
            }
        }

        const socket = io();
        const username = "{{username}}";
        let skip = 0;
        let loading = false;
        const messagesDiv = document.getElementById("messages");
        const typingIndicator = document.getElementById("typingIndicator");
        const messageInput = document.getElementById("messageInput");

        let typingUsers = new Set();
        let typingTimeout;

        const initialMessages = JSON.parse('{{{initialMessages}}}');
        initialMessages.forEach(displayMessage);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
        skip = initialMessages.length;

        socket.emit("joinChat", username);

        socket.on("receiveMessage", (data) => {
            displayMessage(data);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        messagesDiv.addEventListener("scroll", () => {
            if (messagesDiv.scrollTop === 0 && !loading) {
                loading = true;
                socket.emit("loadOlderMessages", { skip, limit: 50 });
            }
        });

        socket.on("olderMessages", (messages) => {
            if (messages.length > 0) {
                const oldScrollHeight = messagesDiv.scrollHeight;
                messages.forEach(msg => displayMessage(msg, true));
                messagesDiv.scrollTop = messagesDiv.scrollHeight - oldScrollHeight;
                skip += messages.length;
            }
            loading = false;
        });

        function sendMessage() {
            const message = messageInput.value.trim();
            if (message !== "") {
                socket.emit("sendMessage", { username, message });
                messageInput.value = "";
                socket.emit("stopTyping", username);
            }
        }

        messageInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                sendMessage();
            } else {
                socket.emit("typing", username);
            }
        });

        messageInput.addEventListener("keyup", () => {
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit("stopTyping", username);
            }, 1000);
        });

        socket.on("userTyping", (user) => {
            typingUsers.add(user);
            updateTypingIndicator();
        });

        socket.on("userStoppedTyping", (user) => {
            typingUsers.delete(user);
            updateTypingIndicator();
        });

        function updateTypingIndicator() {
            const typingId = "typingMessage";
            let typingMessage = document.getElementById(typingId);

            if (typingUsers.size === 0) {
                if (typingMessage) typingMessage.remove();
            } else {
                const typingText = typingUsers.size === 1
                    ? `${[...typingUsers][0]} is typing...`
                    : "Multiple people are typing...";

                if (!typingMessage) {
                    typingMessage = document.createElement("div");
                    typingMessage.id = typingId;
                    typingMessage.className = "message system-message";
                    messagesDiv.appendChild(typingMessage);
                }

                typingMessage.textContent = typingText;
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            }
        }

        function displayMessage(data, prepend = false) {
            const messageDiv = document.createElement("div");
            const timestampDiv = document.createElement("div");
            timestampDiv.className = "timestamp";

            const date = new Date(data.timestamp || Date.now());
            const day = date.getDate().toString().padStart(2, "0");
            const month = (date.getMonth() + 1).toString().padStart(2, "0");
            const year = date.getFullYear();
            const hours = date.getHours() % 12 || 12;
            const minutes = date.getMinutes().toString().padStart(2, "0");
            const amPm = date.getHours() >= 12 ? "PM" : "AM";

            timestampDiv.textContent = `${day}-${month}-${year} ${hours}:${minutes} ${amPm}`;

            if (data.type === "join" || data.type === "leave") {
                messageDiv.className = "system-message";
                messageDiv.textContent = data.message;
            } else {
                messageDiv.className = `message ${data.senderName === username ? 'own' : 'other'}`;
                messageDiv.innerHTML = `<span>${data.senderName !== username ? `<b>${data.senderName}:</b> ` : ''}${data.message}</span>`;
                messageDiv.appendChild(timestampDiv);
            }

            if (isAdmin) {
                const deleteButton = document.createElement("button");
                deleteButton.textContent = "🗑";
                deleteButton.style.marginLeft = "10px";
                deleteButton.style.background = "none";
                deleteButton.style.border = "none";
                deleteButton.style.cursor = "pointer";
                deleteButton.style.color = "#f00";
                deleteButton.title = "Delete Message";

                deleteButton.addEventListener("click", () => {
                    deleteMessage(data._id);
                });

                messageDiv.appendChild(deleteButton);
            }

            if (prepend) {
                messagesDiv.insertBefore(messageDiv, messagesDiv.firstChild);
            } else {
                messagesDiv.appendChild(messageDiv);
            }
        }

        socket.on("error", (error) => {
            console.error("Socket error:", error);
        });
    </script>

</body>

</html>