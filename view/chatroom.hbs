<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Chatroom</title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .chat-container {
            width: 90%;
            max-width: 800px;
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 80vh;
        }
        .chat-header {
            background-color: #0056b3;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
        }
        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            scrollbar-width: thin;
            scrollbar-color: #ddd #f4f4f9;
        }
        .message {
            margin: 5px 0;
            padding: 10px;
            border-radius: 8px;
            max-width: 70%;
            word-wrap: break-word;
            display: flex;
            flex-direction: column;
            font-size: 14px;
        }
        .message.own {
            background-color: #0056b3;
            color: white;
            align-self: flex-end;
        }
        .message.other {
            background-color: #e9ecef;
            align-self: flex-start;
        }
        .timestamp {
            font-size: 10px;
            opacity: 0.7;
            text-align: right;
            margin-top: 3px;
        }
        .input-container {
            padding: 15px;
            background-color: #f8f9fa;
            display: flex;
            gap: 10px;
            border-top: 1px solid #ddd;
        }
        #messageInput {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 14px;
        }
        button {
            padding: 10px 15px;
            background-color: #0056b3;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        button:hover {
            background-color: #004494;
        }
        .system-message {
            text-align: center;
            color: #666;
            font-style: italic;
            margin: 5px 0;
        }
        .typing-indicator {
            font-size: 12px;
            color: gray;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            Professional Chatroom
            <span class="typing-indicator" id="typingIndicator"></span>
        </div>
        <div class="messages" id="messages"></div>
        <div class="input-container">
            <input type="text" id="messageInput" placeholder="Type a message..." autocomplete="off">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    {{!-- <script>
        const socket = io();
        const username = "{{username}}";
        let skip = 0;
        let loading = false;
        const messagesDiv = document.getElementById("messages");
        const typingIndicator = document.getElementById("typingIndicator");

        const initialMessages = JSON.parse('{{{initialMessages}}}');
        initialMessages.forEach(displayMessage);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
        skip = initialMessages.length;

        socket.emit("joinChat", username);

        socket.on("receiveMessage", (data) => {
            displayMessage(data);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        messagesDiv.addEventListener("scroll", () => {
            if (messagesDiv.scrollTop === 0 && !loading) {
                loading = true;
                socket.emit("loadOlderMessages", { skip, limit: 50 });
            }
        });

        socket.on("olderMessages", (messages) => {
            if (messages.length > 0) {
                const oldScrollHeight = messagesDiv.scrollHeight;
                messages.forEach(msg => displayMessage(msg, true));
                messagesDiv.scrollTop = messagesDiv.scrollHeight - oldScrollHeight;
                skip += messages.length;
            }
            loading = false;
        });

        function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();
            
            if (message !== "") {
                socket.emit("sendMessage", { username, message });
                messageInput.value = "";
            }
        }

        document.getElementById("messageInput").addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                sendMessage();
            } else {
                socket.emit("typing", username);
            }
        });

        socket.on("typing", (user) => {
            typingIndicator.textContent = `${user} is typing...`;
            setTimeout(() => {
                typingIndicator.textContent = "";
            }, 2000);
        });

        function displayMessage(data, prepend = false) {
            const messageDiv = document.createElement("div");
            const timestampDiv = document.createElement("div");
            timestampDiv.className = "timestamp";
            timestampDiv.textContent = new Date(data.timestamp || Date.now()).toLocaleTimeString();

            if (data.type === "join" || data.type === "leave") {
                messageDiv.className = "system-message";
                messageDiv.textContent = data.message;
            } else {
                messageDiv.className = `message ${data.senderName === username ? 'own' : 'other'}`;
                messageDiv.textContent = data.senderName !== username ? `${data.senderName}: ${data.message}` : data.message;
                messageDiv.appendChild(timestampDiv);
            }

            if (prepend) {
                messagesDiv.insertBefore(messageDiv, messagesDiv.firstChild);
            } else {
                messagesDiv.appendChild(messageDiv);
            }
        }

        socket.on("error", (error) => {
            console.error("Socket error:", error);
        });
    </script> --}}
    <script>
    const socket = io();
    const username = "{{username}}";
    let skip = 0;
    let loading = false;
    const messagesDiv = document.getElementById("messages");
    const typingIndicator = document.getElementById("typingIndicator");
    const messageInput = document.getElementById("messageInput");

    let typingUsers = new Set();
    let typingTimeout;

    // Load initial messages
    const initialMessages = JSON.parse('{{{initialMessages}}}');
    initialMessages.forEach(displayMessage);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
    skip = initialMessages.length;

    socket.emit("joinChat", username);

    socket.on("receiveMessage", (data) => {
        displayMessage(data);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    });

    // Infinite scroll for older messages
    messagesDiv.addEventListener("scroll", () => {
        if (messagesDiv.scrollTop === 0 && !loading) {
            loading = true;
            socket.emit("loadOlderMessages", { skip, limit: 50 });
        }
    });

    socket.on("olderMessages", (messages) => {
        if (messages.length > 0) {
            const oldScrollHeight = messagesDiv.scrollHeight;
            messages.forEach(msg => displayMessage(msg, true));
            messagesDiv.scrollTop = messagesDiv.scrollHeight - oldScrollHeight;
            skip += messages.length;
        }
        loading = false;
    });

    function sendMessage() {
        const message = messageInput.value.trim();
        if (message !== "") {
            socket.emit("sendMessage", { username, message });
            messageInput.value = "";
            socket.emit("stopTyping", username);
        }
    }

    messageInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
            sendMessage();
        } else {
            socket.emit("typing", username);
        }
    });

    messageInput.addEventListener("keyup", () => {
        clearTimeout(typingTimeout);
        typingTimeout = setTimeout(() => {
            socket.emit("stopTyping", username);
        }, 1000);
    });

    socket.on("userTyping", (user) => {
        typingUsers.add(user);
        updateTypingIndicator();
    });

    socket.on("userStoppedTyping", (user) => {
        typingUsers.delete(user);
        updateTypingIndicator();
    });

    function updateTypingIndicator() {
        if (typingUsers.size === 0) {
            typingIndicator.textContent = "";
        } else if (typingUsers.size === 1) {
            typingIndicator.textContent = `${[...typingUsers][0]} is typing...`;
        } else {
            typingIndicator.textContent = "Multiple people are typing...";
        }
    }

    function displayMessage(data, prepend = false) {
        const messageDiv = document.createElement("div");
        const timestampDiv = document.createElement("div");
        timestampDiv.className = "timestamp";
        timestampDiv.textContent = new Date(data.timestamp || Date.now()).toLocaleTimeString();

        if (data.type === "join" || data.type === "leave") {
            messageDiv.className = "system-message";
            messageDiv.textContent = data.message;
        } else {
            messageDiv.className = `message ${data.senderName === username ? 'own' : 'other'}`;
            messageDiv.innerHTML = `<span>${data.senderName !== username ? `<b>${data.senderName}:</b> ` : ''}${data.message}</span>`;
            messageDiv.appendChild(timestampDiv);
        }

        if (prepend) {
            messagesDiv.insertBefore(messageDiv, messagesDiv.firstChild);
        } else {
            messagesDiv.appendChild(messageDiv);
        }
    }

    socket.on("error", (error) => {
        console.error("Socket error:", error);
    });
</script>

</body>
</html>